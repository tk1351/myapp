{"version":3,"sources":["features/authSlice.ts","firebase.ts","features/searchSlice.ts","history.ts","components/Search.tsx","features/userSlice.ts","components/Navbar.tsx","features/categorySlice.ts","features/postSlice.ts","components/Spinner.tsx","components/AuthState.tsx","components/AddPost.tsx","components/Post.tsx","features/commentSlice.ts","components/Paginations.tsx","components/Sidebar.tsx","components/Feed.tsx","components/Auth.tsx","components/SearchResult.tsx","components/SinglePostPage.tsx","components/EditPost.tsx","components/UserProfile.tsx","components/EditProfile.tsx","components/NotFound.tsx","components/CategoryPage.tsx","components/Admin/AdminScreen.tsx","components/Admin/AdminUsersList.tsx","components/Admin/AdminPostsList.tsx","components/Admin/AdminPostDetail.tsx","components/Home.tsx","Routes.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","modules/Auth.module.css"],"names":["authSlice","createSlice","name","initialState","user","uid","photoUrl","displayName","role","reducers","login","state","action","payload","logout","updateUserProfile","actions","selectUser","auth","firebaseApp","firebase","initializeApp","apiKey","process","authDomain","projectId","databaseURL","storageBucket","messagingSenderId","appId","firestore","storage","provider","GoogleAuthProvider","searchSlice","values","q","searchPosts","push","createBrowserHistory","useStyles","makeStyles","theme","createStyles","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginRight","spacing","marginLeft","width","breakpoints","up","searchIcon","padding","height","pointerEvents","display","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","initialValue","Search","classes","useState","setQueryParam","dispatch","useDispatch","className","initialValues","onSubmit","searchUsingQueryParam","history","pathname","handleChange","InputBase","placeholder","root","input","inputProps","value","onChange","type","fetchAvatars","createAsyncThunk","a","axios","get","res","data","newValues","url","put","deleteUser","delete","usersSlice","users","status","error","extraReducers","pending","fulfilled","concat","rejected","message","profileData","findIndex","splice","deleteUsersData","_id","meta","arg","selectAllUsers","userData","grow","flexGrow","menuButton","title","sectionDesktop","sectionMobile","Navbar","authUser","useSelector","findAuthUsersRole","find","isAuthMenuList","key","path","isNotAuthMenuList","adminMenuList","isAuthName","AppBar","Toolbar","IconButton","edge","aria-label","Typography","variant","noWrap","map","menu","to","onClick","signOut","fetchCategoriesData","categorySlice","categories","selectAllCategories","categoriesData","fetchPostData","addNewPost","post","updatePost","deletePost","props","deletePostWithPostArgument","deletePostWithSinglePostArgument","singlePost","deleteUsersPost","postsSlice","posts","postData","deletePostData","deletePostDataWithPostArgument","deletePostDataWithSinglePostArgument","deleteUsersPostData","selectAllPosts","Spinner","Container","component","maxWidth","CircularProgress","AuthState","children","isLoading","isLogin","setIsLogin","useEffect","unsub","onAuthStateChanged","form","marginTop","submit","margin","text","categoryId","fav","createdAt","AddPost","postImage","setPostImage","categoriesStatus","onSavePostClicked","imageUrl","str","randomChar","Array","from","crypto","getRandomValues","Uint32Array","n","length","join","fileName","ref","child","getDownloadURL","image","resultAction","unwrapResult","console","onChangeImageHandler","e","target","files","TextField","fullWidth","id","label","required","multiline","rows","select","category","MenuItem","Box","fontSize","Button","convertPostingDateToJapanTime","moment","locale","format","Post","findOwnPostData","username","findAuthorName","Avatar","src","matchCategoriesIdAndCategoriesName","window","confirm","onDeletePostClicked","fetchCommentsData","addNewComment","commentSlice","comments","selectAllComments","commentData","Paginations","postsPerPage","totalPosts","paginate","pageNumbers","i","Math","ceil","number","Sidebar","Feed","currentPage","setCurrentPage","postStatus","userStatus","commentsStatus","orderedPosts","slice","sort","b","localeCompare","indexOfLastPost","indexOfFirstPost","currentPosts","photoURL","addUserInfo","log","matchUidAndPhotoUrl","pageNumber","backgroundImage","backgroundRepeat","grey","backgroundSize","backgroundPosition","paper","flexDirection","avatar","secondary","main","modal","outline","boxShadow","shadows","Auth","email","setEmail","password","setPassword","setUsername","resetEmail","setResetEmail","openModal","setOpenModal","avatarImage","setAvatarImage","signUpEmail","createUserWithEmailAndPassword","updateProfile","signInEmail","signInWithEmailAndPassword","signInGoogle","signInWithPopup","catch","err","alert","sendResetEmail","sendPasswordResetEmail","then","isLoginDisabled","isRegisterDisabled","Grid","container","CssBaseline","item","xs","sm","md","Paper","elevation","square","data-testid","noValidate","autoComplete","autoFocus","textAlign","styles","login_addIconLoaded","login_addIcon","login_hiddenIcon","disabled","startIcon","Modal","open","onClose","style","top","left","transform","InputLabelProps","shrink","SearchResult","postLists","setPostLists","queryParams","fetchPostsDataByQueryParams","orderdPosts","SinglePostPage","match","params","openComments","setOpenComments","fetchAuthorData","commentsOnThisPost","filter","comment","postId","matchUidAndUsername","onSaveCommentClicked","com","EditPost","onUpdatePostClicked","UserProfile","singleUser","usersPosts","company","bio","EditProfile","onUpdateProfileClicked","NotFound","CategoryPage","categoriesPosts","categoriesPost","getCategoriesName","AdminScreen","AdminUsersList","adminUsers","onDeleteUserClicked","AdminPostsList","AdminPostDetail","Home","Routes","exact","App","unSub","store","configureStore","reducer","authReducer","postsReducer","usersReducer","categoryReducer","searchReducer","commentReducer","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.44c0f52c.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../app/store'\n\ninterface User {\n  displayName: string\n  photoUrl: string\n  role: string\n}\n\nconst initialState = {\n  user: {\n    uid: '',\n    photoUrl: '',\n    displayName: '',\n    role: ''\n  }\n}\n\nexport const authSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload\n    },\n    logout: (state) => {\n      state.user = { uid: '', photoUrl: '', displayName: '', role: '' }\n    },\n    updateUserProfile: (state, action: PayloadAction<User>) => {\n      state.user.displayName = action.payload.displayName\n      state.user.photoUrl = action.payload.photoUrl\n      state.user.role = action.payload.role\n    }\n  }\n})\n\nexport const { login, logout, updateUserProfile } = authSlice.actions\n\nexport const selectUser = (state: RootState) => state.auth.user\n\nexport default authSlice.reducer","import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport 'firebase/storage'\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_APIKEY,\n  authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n}\n\nexport const firebaseApp = firebase.initializeApp(firebaseConfig)\n\nexport const db = firebaseApp.firestore()\nexport const auth = firebaseApp.auth()\nexport const storage = firebaseApp.storage()\nexport const provider = new firebase.auth.GoogleAuthProvider()\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = [{ values: { q: '' } }]\n\nexport const searchSlice = createSlice({\n  name: 'search',\n  initialState,\n  reducers: {\n    searchPosts(state, action)  {\n      state.push(action.payload)\n    }\n  }\n})\n\nexport const { searchPosts } = searchSlice.actions\n\nexport default searchSlice.reducer","import { createBrowserHistory } from 'history'\n\nexport default createBrowserHistory()","import React, { useState } from 'react'\nimport { Formik, Form } from 'formik'\nimport { \n  makeStyles, \n  Theme,\n  createStyles,\n  fade,\n  InputBase,\n} from '@material-ui/core'\nimport SearchIcon from '@material-ui/icons/Search'\nimport { useDispatch } from 'react-redux'\nimport { searchPosts } from '../features/searchSlice'\nimport history from '../history'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    search: {\n      position: 'relative',\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: fade(theme.palette.common.white, 0.15),\n      '&:hover': {\n        backgroundColor: fade(theme.palette.common.white, 0.25),\n      },\n      marginRight: theme.spacing(2),\n      marginLeft: 0,\n      width: '100%',\n      [theme.breakpoints.up('sm')]: {\n        marginLeft: theme.spacing(3),\n        width: 'auto',\n      },\n    },\n    searchIcon: {\n      padding: theme.spacing(0, 2),\n      height: '100%',\n      position: 'absolute',\n      pointerEvents: 'none',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    inputRoot: {\n      color: 'inherit',\n    },\n    inputInput: {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n      transition: theme.transitions.create('width'),\n      width: '100%',\n      [theme.breakpoints.up('md')]: {\n        width: '20ch',\n      },\n    },\n  })\n)\n\ninterface QueryParam {\n  q: string\n}\n\nconst initialValue = {\n  q: '',\n}\n\nconst Search: React.FC = () => {\n  const classes = useStyles()\n  const [queryParam, setQueryParam] = useState<QueryParam>(initialValue)\n\n  const dispatch = useDispatch()\n\n  const searchUsingQueryParam = (values: QueryParam) => {\n    if (values) {\n      dispatch(\n        searchPosts({\n          values,\n        })\n      )\n      setQueryParam(initialValue)\n    }\n  }\n\n  return (\n    <>\n      <div className={classes.search}>\n        <div className={classes.searchIcon}>\n          <SearchIcon />\n        </div>\n        <Formik\n          initialValues={initialValue}\n          onSubmit={(values) => {\n            searchUsingQueryParam(values)\n            history.push({\n              pathname: `/search?q=${values.q}`,\n              state: { values }\n            })\n          }}\n        >\n          {({ values, handleChange }) => (\n            <Form>\n              <InputBase\n                placeholder=\"Search…\"\n                classes={{\n                  root: classes.inputRoot,\n                  input: classes.inputInput,\n                }}\n                inputProps={{ 'aria-label': 'search' }}\n                value={values.q}\n                onChange={handleChange}\n                name=\"q\"\n                type=\"search\"\n              />\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </>\n  )\n}\n\nexport default Search\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\n\nconst initialState = {\n  users: [],\n  status: 'idle',\n  error: null\n}\n\nexport interface Profile {\n  uid: string,\n  username: string,\n  photoUrl: string,\n  company: string,\n  position: string,\n  bio: string,\n  url: string\n}\n\nexport const fetchAvatars = createAsyncThunk(\n  'users/fetchAvatars',\n  async () => {\n    const url = '/api/v1/user'\n    const res = await axios.get(url)\n    return res.data\n  }\n)\n\nexport const updateUserProfile = createAsyncThunk(\n  'users/updateUserProfile',\n  async (newValues: Profile) => {\n    const url = `/api/v1/user/${newValues.uid}`\n    const res = await axios.put(url, newValues)\n    return res.data\n  }\n)\n\nexport const deleteUser = createAsyncThunk(\n  'users/deleteUser',\n  async (user: Profile) => {\n    const url = `/api/v1/user/${user.uid}`\n    const res = await axios.delete(url)\n    return res.data\n  }\n)\n\nexport const usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchAvatars.pending as any]: (state, action) => {\n      state.status = 'loading'\n    },\n    [fetchAvatars.fulfilled as any]: (state, action) => {\n      state.status = 'suceeded'\n      state.users = state.users.concat(action.payload)\n    },\n    [fetchAvatars.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    },\n    [updateUserProfile.fulfilled as any]: (state: any, action) => {\n      const profileData = state.users.findIndex(\n        (user: { uid: string }) => user.uid === action.payload.uid\n      )\n      state.users.splice(profileData, 1, action.payload)\n    },\n    [updateUserProfile.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    },\n    [deleteUser.fulfilled as any]: (state: any, action) => {\n      const deleteUsersData = state.users.findIndex(\n        (user: { _id: string }) => user._id === action.meta.arg._id\n      )\n      state.users.splice(deleteUsersData, 1)\n    },\n    [deleteUser.rejected as any]: (state: any, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    }\n  }\n})\n\nexport const selectAllUsers = (state: any) => state.userData.users\n\nexport default usersSlice.reducer","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { auth } from '../firebase'\nimport {\n  makeStyles,\n  Theme,\n  createStyles,\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n} from '@material-ui/core'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport Search from './Search'\nimport { selectUser } from '../features/authSlice'\nimport { useSelector } from 'react-redux'\nimport { selectAllUsers } from '../features/userSlice'\nimport history from '../history'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    grow: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      display: 'none',\n      [theme.breakpoints.up('sm')]: {\n        display: 'block',\n      },\n    },\n    sectionDesktop: {\n      display: 'none',\n      [theme.breakpoints.up('md')]: {\n        display: 'flex',\n      },\n    },\n    sectionMobile: {\n      display: 'flex',\n      [theme.breakpoints.up('md')]: {\n        display: 'none',\n      },\n    },\n  })\n)\n\nconst Navbar: React.FC = () => {\n  const classes = useStyles()\n\n  const authUser = useSelector(selectUser)\n  const users = useSelector(selectAllUsers)\n\n  // loginユーザーのroleを特定\n  const findAuthUsersRole = users.find(\n    (user: { uid: string }) => user.uid === authUser.uid\n  )?.role\n\n  const isAuthMenuList = [\n    { key: '1', path: '/feed', name: 'Feed' },\n    { key: '2', path: '/add', name: '投稿' },\n    { key: '3', path: `/user/edit/${authUser.uid}`, name: 'プロフィール変更' },\n  ]\n\n  const isNotAuthMenuList = [{ key: '1', path: '/login', name: 'ログイン' }]\n\n  const adminMenuList = [{ key: '1', path: '/admin', name: '管理画面' }]\n\n  const menuList = () => {\n    if (findAuthUsersRole === 'user') {\n      return (\n        <>\n          {isAuthMenuList.map((menu) => (\n            <Link key={menu.key} to={menu.path}>\n              {menu.name}\n            </Link>\n          ))}\n          <button\n            onClick={async () => {\n              await auth.signOut()\n              await history.push('/login')\n            }}\n          >\n            ログアウト\n          </button>\n        </>\n      )\n    } else if (findAuthUsersRole === 'admin') {\n      return adminMenuList.map((menu) => (\n        <Link key={menu.key} to={menu.path}>\n          {menu.name}\n        </Link>\n      ))\n    }\n    return isNotAuthMenuList.map((menu) => (\n      <Link key={menu.key} to={menu.path}>\n        {menu.name}\n      </Link>\n    ))\n  }\n\n  const isAuthName = authUser ? (\n    <>\n      <p>{authUser.displayName}</p>\n    </>\n  ) : (\n    <></>\n  )\n\n  return (\n    <div className={classes.grow}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            MyApp\n          </Typography>\n          {menuList()}\n          {isAuthName}\n          <Search />\n          <div className={classes.grow} />\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n\nexport default Navbar\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\n\nconst initialState = {\n  categories: [],\n  status: 'idle',\n  error: null\n}\n\nexport const fetchCategoriesData = createAsyncThunk(\n  'category/fetchCategoriesData',\n  async () => {\n    const url = '/api/v1/category'\n    const res = await axios.get(url)\n    return res.data\n  }\n)\n\nexport const categorySlice = createSlice({\n  name: 'category',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchCategoriesData.pending as any]: (state, action) => {\n      state.status = 'loading'\n    },\n    [fetchCategoriesData.fulfilled as any]: (state, action) => {\n      state.status = 'succeeded'\n      state.categories = state.categories.concat(action.payload)\n    },\n    [fetchCategoriesData.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    }\n  }\n})\n\nexport const selectAllCategories = (state: any) => state.categoriesData.categories\n\nexport default categorySlice.reducer","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { Profile } from './userSlice'\n\ninterface PostData {\n  title: string\n  text: string\n  categoryId: string\n  url: string\n  uid: string\n  fav: number\n}\n\nexport interface PostedData {\n  _id: string\n  uid: string\n  title: string\n  text: string\n  categoryId: string\n  url: string\n  fav: number\n  image: string\n}\n\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  error: null\n}\n\nexport const fetchPostData = createAsyncThunk(\n  'posts/fetchPostData',\n  async () => {\n    const url = '/api/v1/post'\n    const res = await axios.get(url)\n    return res.data\n  }\n)\n\nexport const addNewPost = createAsyncThunk(\n  'posts/addNewPost',\n  async (newValues: PostData) => {\n    const url = '/api/v1/post'\n    const res = await axios.post(url, newValues)\n    return res.data\n  }\n)\n\nexport const updatePost = createAsyncThunk(\n  'posts/updatePost',\n  async (newValues: PostedData) => {\n    const url = `/api/v1/post/${newValues._id}`\n    const res = await axios.put(url, newValues)\n    return res.data\n  }\n)\n\nexport const deletePost = createAsyncThunk(\n  'posts/deletePost',\n  async (props: PostedData) => {\n    const url = `/api/v1/post/${props._id}`\n    const res = await axios.delete(url)\n    return res.data\n  }\n)\n\n// 引数がpostのものがあるため、2つ削除関数を追加\nexport const deletePostWithPostArgument = createAsyncThunk(\n  'posts/deletePostWithPostArgument',\n  async (post: PostedData) => {\n    const url = `/api/v1/post/${post._id}`\n    const res = await axios.delete(url)\n    return res.data\n  }\n)\n\nexport const deletePostWithSinglePostArgument = createAsyncThunk(\n  'posts/deletePostWithSinglePostArgument',\n  async (singlePost: PostedData) => {\n    const url = `/api/v1/post/${singlePost._id}`\n    const res = await axios.delete(url)\n    return res.data\n  }\n)\n\nexport const deleteUsersPost = createAsyncThunk(\n  'posts/deleteUsersPost',\n  async (user: Profile) => {\n    const url = `/api/v1/post/user/${user.uid}`\n    const res = await axios.delete(url)\n    return res.data\n  }\n)\n\nexport const postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchPostData.pending as any]: (state, action) => {\n      state.status = 'loading'\n    },\n    [fetchPostData.fulfilled as any]: (state, action) => {\n      state.status = 'succeeded'\n      state.posts = state.posts.concat(action.payload)\n    },\n    [fetchPostData.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    },\n    [addNewPost.fulfilled as any]: (state: any, action) => {\n      state.posts.push(action.payload)\n    },\n    [addNewPost.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    },\n    [updatePost.fulfilled as any]: (state: any, action) => {\n      const postData = state.posts.findIndex(\n        (post: { _id: string }) => post._id === action.payload._id\n      )\n      state.posts.splice(postData, 1, action.payload)\n    },\n    [updatePost.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    },\n    [deletePost.fulfilled as any]: (state: any, action) => {\n      const deletePostData = state.posts.findIndex(\n        (post: { _id: string }) => post._id === action.meta.arg._id\n      )\n      state.posts.splice(deletePostData, 1)\n    },\n    [deletePost.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    },\n    [deletePostWithPostArgument.fulfilled as any]: (state: any, action) => {\n      const deletePostDataWithPostArgument = state.posts.findIndex(\n        (post: { _id: string }) => post._id === action.meta.arg._id\n      )\n      state.posts.splice(deletePostDataWithPostArgument, 1)\n    },\n    [deletePostWithPostArgument.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    },\n    [deletePostWithSinglePostArgument.fulfilled as any]: (state: any, action) => {\n      const deletePostDataWithSinglePostArgument = state.posts.findIndex(\n        (post: { _id: string }) => post._id === action.meta.arg._id\n      )\n      state.posts.splice(deletePostDataWithSinglePostArgument, 1)\n    },\n    [deletePostWithSinglePostArgument.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    },\n    [deleteUsersPost.fulfilled as any]: (state: any, action) => {\n      const deleteUsersPostData = state.posts.findIndex(\n        (post: { _id: string }) => post._id === action.meta.arg._id\n      )\n      state.posts.splice(deleteUsersPostData, 1)\n    },\n    [deleteUsersPost.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    }\n  }\n})\n\nexport const selectAllPosts = (state: any) => state.postData.posts\n\nexport default postsSlice.reducer","import React from 'react'\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Container from \"@material-ui/core/Container\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      \"& > * + *\": {\n        marginLeft: theme.spacing(2),\n      },\n    },\n  })\n);\n\nconst Spinner: React.FC = () => {\n  const classes = useStyles();\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <div className={classes.root}>\n        <CircularProgress />\n      </div>\n    </Container>\n  )\n}\n\nexport default Spinner\n","import React, { useState, useEffect } from 'react'\nimport { auth } from '../firebase'\nimport firebase from 'firebase'\nimport { Redirect, Router } from 'react-router-dom'\nimport Spinner from '../components/Spinner'\nimport Container from '@material-ui/core/Container'\nimport history from '../history'\n\nexport type AuthenticationState =\n  | { isLoading: true }\n  | { isLoading: false; user: firebase.User | null }\n\nconst AuthState: React.FC = ({ children }) => {\n  const [isLogin, setIsLogin] = useState<AuthenticationState>({\n    isLoading: true,\n  })\n\n  useEffect(() => {\n    const unsub = auth.onAuthStateChanged((user) => {\n      setIsLogin({ isLoading: false, user })\n      unsub()\n    })\n  }, [])\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      {isLogin.isLoading ? (\n        <div>\n          <Spinner />\n        </div>\n      ) : (\n        <>\n          {(() => {\n            return !isLogin.user ? (\n              <Router history={history}>\n                <Redirect to={'/'} />\n              </Router>\n            ) : (\n              <>{children}</>\n            )\n          })()}\n        </>\n      )}\n    </Container>\n  )\n}\n\nexport default AuthState\n","import React, { useState, useEffect } from 'react'\nimport {\n  makeStyles,\n  Typography,\n  Button,\n  TextField,\n  MenuItem,\n  Container,\n  Box,\n  IconButton\n} from '@material-ui/core'\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport { Formik, Form } from 'formik'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { selectUser } from '../features/authSlice'\nimport { storage } from '../firebase'\nimport history from '../history'\nimport { fetchCategoriesData, selectAllCategories } from '../features/categorySlice'\nimport { addNewPost } from '../features/postSlice'\nimport { unwrapResult } from '@reduxjs/toolkit'\nimport { Category } from './Sidebar';\nimport AuthState from './AuthState';\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}))\n\nexport interface values {\n  title: string\n  text: string\n  categoryId: string\n  url: string\n  uid: string\n  fav: number\n}\n\nconst initialValues = {\n  title: '',\n  text: '',\n  categoryId: '',\n  url: '',\n  uid: '',\n  fav: 0,\n  _id: '',\n  createdAt: null\n}\n\nconst AddPost: React.FC = () => {\n  const classes = useStyles()\n  const [postImage, setPostImage] = useState<File | null>(null)\n  \n  const user = useSelector(selectUser)\n  const categories = useSelector(selectAllCategories)\n\n  const categoriesStatus = useSelector((state: any) => state.categoriesData.status)\n\n  const dispatch = useDispatch()\n \n  useEffect(() => {\n    if (categoriesStatus === 'idle') {\n      dispatch(fetchCategoriesData())\n    }\n  }, [categoriesStatus, dispatch])\n\n  const onSavePostClicked = async (values: values) => {\n    let imageUrl = ''\n\n    if (postImage) {\n      const str =\n        'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n      const num = 16\n      const randomChar = Array.from(\n        crypto.getRandomValues(new Uint32Array(num))\n      )\n        .map((n) => str[n % str.length])\n        .join('')\n      const fileName = randomChar + '_' + postImage.name\n      await storage.ref(`images/${fileName}`).put(postImage)\n      imageUrl = await storage.ref('images').child(fileName).getDownloadURL()\n\n      try {\n        const newValues = { ...values, uid: user.uid, fav: 0, image: imageUrl }\n        const resultAction = await dispatch(addNewPost(newValues))\n        unwrapResult(resultAction as any)\n        history.push('/feed')\n      } catch (err) {\n        console.error(err)\n      }\n    } else {\n      // 画像がない場合\n      try {\n        const newValues = { ...values, uid: user.uid, fav: 0 }\n        const resultAction = await dispatch(addNewPost(newValues))\n        unwrapResult(resultAction as any)\n        history.push('/feed')\n      } catch (err) {\n        console.error(err)\n      }\n    }\n  }\n\n  const onChangeImageHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files![0]) {\n      setPostImage(e.target.files![0])\n      e.target.value = ''\n    }\n  }\n\n  return (\n    <AuthState>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <Typography component=\"h1\" variant=\"h6\">\n          記事を投稿する\n        </Typography>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={(values: values) => {\n            onSavePostClicked(values)\n          }}\n        >\n          {({ values, handleChange }) => (\n            <Form>\n              <TextField \n                fullWidth \n                variant=\"outlined\"\n                id=\"outlined-basic\"\n                margin=\"normal\"\n                label=\"商品名\"\n                name=\"title\"\n                type=\"text\"\n                value={values.title}\n                onChange={handleChange}\n                required\n              />\n              <TextField \n                fullWidth \n                variant=\"outlined\"\n                id=\"outlined-basic\"\n                margin=\"normal\"\n                label=\"本文\"\n                name=\"text\"\n                type=\"text\"\n                multiline\n                rows={10}\n                value={values.text}\n                onChange={handleChange}\n                required\n              />\n              <TextField \n                fullWidth \n                select\n                variant=\"outlined\"\n                id=\"outlined-basic\"\n                margin=\"normal\"\n                label=\"カテゴリー\"\n                name=\"categoryId\"\n                type=\"text\"\n                value={values.categoryId}\n                onChange={handleChange}\n                required\n              >\n                {categories.map((category: Category) => (\n                  <MenuItem key={category.name} value={category._id}>\n                    {category.name}\n                  </MenuItem>\n                ))}\n              </TextField>\n              <Box>\n                <IconButton\n                  color=\"primary\"\n                  aria-label=\"upload image\"\n                  component=\"span\"\n                >\n                  <label>\n                    <PhotoCamera fontSize=\"large\"/>\n                    <input \n                      type=\"file\"\n                      onChange={onChangeImageHandler}\n                    />\n                  </label>\n                </IconButton>\n              </Box>\n              <TextField \n                fullWidth \n                variant=\"outlined\"\n                id=\"outlined-basic\"\n                margin=\"normal\"\n                label=\"URL\"\n                name=\"url\"\n                type=\"text\"\n                value={values.url}\n                onChange={handleChange}\n                required\n              />\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submit}\n                fullWidth\n              >\n                投稿\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Container>\n    </AuthState>\n  )\n}\n\nexport default AddPost\n","import React from 'react'\nimport moment from 'moment'\nimport { Avatar } from '@material-ui/core'\nimport { useDispatch ,useSelector } from 'react-redux'\nimport { selectAllCategories } from '../features/categorySlice'\nimport { selectUser } from '../features/authSlice'\nimport { Link } from 'react-router-dom'\nimport { selectAllPosts, deletePost, PostedData } from '../features/postSlice'\nimport { selectAllUsers } from '../features/userSlice'\n\ninterface PostData  {\n  props: PostProps\n}\n\nexport interface PostProps {\n  _id: string\n  uid: string\n  categoryId: string\n  title: string\n  text: string\n  image: string\n  url: string\n  fav: number\n  createdAt: any\n}\n\nexport const initialCategoriesState = [{\n  name: '',\n  _id: ''\n}]\n\nexport const convertPostingDateToJapanTime = (createdAt: any) => {\n  moment.locale('ja')\n  return moment(createdAt).format('YYYY/MM/DD')\n}\n\nconst Post: React.FC<PostData> = ({ props }) => {\n  const authUser = useSelector(selectUser)\n  const categories = useSelector(selectAllCategories)\n  const posts = useSelector(selectAllPosts)\n  const users = useSelector(selectAllUsers)\n\n  const dispatch = useDispatch()\n\n  // categoryIdと名前を一致させる\n  const matchCategoriesIdAndCategoriesName = (categoryId: string) => {\n    return categories.find((category: { _id: string }) => category._id === categoryId)?.name\n  }\n\n  const findOwnPostData = posts.find(\n    (post : { uid: string }) => post.uid === authUser.uid\n  )\n\n  const onDeletePostClicked = (props: PostedData) => {\n    if (window.confirm('記事を削除してもよろしいですか？')) {\n      dispatch(deletePost(props))\n    }\n  }\n\n  const findAuthorName = (uid: string) => {\n    return users.find((user: { uid: string }) => user.uid === uid)?.username\n  }\n\n  return (\n    <div>\n      <p>{convertPostingDateToJapanTime(props.createdAt)}</p>\n      <p>\n        <Link to={`/user/profile/${props.uid}`}>\n          Author: {findAuthorName(props.uid)}\n        </Link>\n      </p>\n      <h1>{props.title}</h1>\n      <p>{props.text}</p>\n      {props.image && (\n        <Avatar src={props.image} />\n      )}\n      <p>カテゴリー: {matchCategoriesIdAndCategoriesName(props.categoryId)}</p>\n      <Link to={`/post/detail/${props._id}`}>続きを読む</Link>\n      {findOwnPostData?.uid === props.uid ? (\n        <>\n          <button>\n            <Link to={`/post/edit/${props._id}`}>編集する</Link>\n          </button>\n          <button onClick={() => onDeletePostClicked(props)}>削除する</button>\n        </>\n      ) : (\n        <></>\n      )}\n    </div>\n  )\n}\n\nexport default Post\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\n\nconst initialState = {\n  comments: [],\n  status: 'idle',\n  error: null\n}\n\nexport interface Value {\n  uid: string;\n  photoUrl: string;\n  text: string;\n  postId: string;\n}\n\nexport const fetchCommentsData = createAsyncThunk(\n  'comments/fetchCommentsData',\n  async () => {\n    const url = '/api/v1/comment'\n    const res = await axios.get(url)\n    return res.data\n  }\n)\n\nexport const addNewComment = createAsyncThunk(\n  'comments/addNewComment',\n  async (newValues: Value) => {\n    const url = '/api/v1/comment'\n    const res = await axios.post(url, newValues)\n    return res.data\n  }\n)\n\nexport const commentSlice = createSlice({\n  name: 'comments',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchCommentsData.pending as any]: (state, action) => {\n      state.status = 'loading'\n    },\n    [fetchCommentsData.fulfilled as any]: (state, action) => {\n      state.status = 'succeeded'\n      state.comments = state.comments.concat(action.payload)\n    },\n    [fetchCommentsData.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    },\n    [addNewComment.fulfilled as any]: (state: any, action) => {\n      state.comments.push(action.payload)\n    },\n    [addNewComment.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    }\n  }\n})\n\nexport const selectAllComments = (state: any) => state.commentData.comments\n\nexport default commentSlice.reducer","import React from 'react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      '& > *': {\n        marginTop: theme.spacing(2),\n      },\n    },\n  })\n)\n\nconst Paginations = ({ postsPerPage, totalPosts, paginate }: any) => {\n  const classes = useStyles()\n  const pageNumbers = []\n\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\n    pageNumbers.push(i)\n  }\n\n  return (\n    <div className={classes.root}>\n      <ul>\n        {pageNumbers.map((number: number) => (\n          <li key={number}>\n            <button onClick={() => paginate(number)}>{number}</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default Paginations\n","import React from 'react'\nimport { Link, Router } from 'react-router-dom'\nimport history from '../history'\nimport { useSelector } from 'react-redux'\nimport { selectAllCategories } from '../features/categorySlice'\n\nexport interface Category {\n  _id: string\n  name: string\n} \n\nconst Sidebar: React.FC = () => {\n  const categories = useSelector(selectAllCategories)\n\n  return (\n    <Router history={history}>\n     {categories.map((category: Category) => (\n       <li key={category._id}>\n         <Link to={`/category/${category._id}`}>{category.name}</Link>\n       </li>\n     ))}\n    </Router>\n  )\n}\n\nexport default Sidebar\n\n","import React, { useEffect, useState } from 'react'\nimport { auth } from '../firebase'\nimport { selectUser } from '../features/authSlice'\nimport { useSelector, useDispatch } from 'react-redux'\nimport axios from 'axios'\nimport Post, { PostProps } from './Post'\nimport { Avatar } from '@material-ui/core'\nimport { fetchPostData, selectAllPosts } from '../features/postSlice'\nimport { fetchAvatars, selectAllUsers } from '../features/userSlice'\nimport { fetchCategoriesData } from '../features/categorySlice'\nimport { fetchCommentsData } from '../features/commentSlice'\nimport Paginations from './Paginations'\nimport AuthState from './AuthState'\nimport Sidebar from './Sidebar'\n\nconst Feed: React.FC = () => {\n  const [currentPage, setCurrentPage] = useState(1)\n  const [postsPerPage] = useState(5)\n\n  const user = useSelector(selectUser)\n  const posts = useSelector(selectAllPosts)\n  const users = useSelector(selectAllUsers)\n  const postStatus = useSelector((state: any) => state.postData.status)\n  const userStatus = useSelector((state: any) => state.userData.status)\n  const categoriesStatus = useSelector((state: any) => state.categoriesData.status)\n  const commentsStatus = useSelector((state: any) => state.commentData.status)\n\n  const dispatch = useDispatch()\n\n  const orderedPosts = posts\n    .slice()\n    .sort((a: { createdAt: string }, b: { createdAt: string }) =>\n      b.createdAt.localeCompare(a.createdAt)\n    )\n\n  const indexOfLastPost = currentPage * postsPerPage\n  const indexOfFirstPost = indexOfLastPost - postsPerPage\n  \n  const currentPosts = orderedPosts.slice(indexOfFirstPost, indexOfLastPost)\n  const paginate = (pageNumber: number) => setCurrentPage(pageNumber)\n  \n  const loginUserState = () => {\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        const addUserInfo = async () => {\n          const url = '/api/v1/user'\n          try {\n            await axios.post(url, {\n              uid: user.uid,\n              username: user.displayName,\n              photoUrl: user.photoURL,\n              role: 'user'\n            })\n          } catch (err) {\n            console.error(err)\n          }\n        }\n        addUserInfo()\n      } else {\n        console.log('未ログイン')\n      }\n    })\n  }\n\n  useEffect(() => {\n    loginUserState()\n    fetchAvatars()\n    if (postStatus === 'idle') {\n      dispatch(fetchPostData())\n    }\n    if (userStatus === 'idle') {\n      dispatch(fetchAvatars())\n    }\n    if (categoriesStatus === 'idle') {\n      dispatch(fetchCategoriesData())\n    }\n    if (commentsStatus === 'idle') {\n      dispatch(fetchCommentsData())\n    }\n  }, [user, postStatus, userStatus, categoriesStatus, commentsStatus, dispatch])\n\n  // 投稿者のuidからphotoUrlを探す\n  const matchUidAndPhotoUrl = (uid: string) => {\n    return users.find((user: { uid: string }) => user.uid === uid)?.photoUrl\n  }\n \n  return (\n    <AuthState>\n      Feed\n      {currentPosts[0]?._id && (\n        <>\n          {currentPosts?.map((post: PostProps) => (\n            <>\n              <Avatar src={matchUidAndPhotoUrl(post.uid)}/>\n              <Post\n                key={post._id}\n                props={post}\n              />\n            </>\n          ))}\n        </>\n      )}\n      <Paginations\n        postsPerPage={postsPerPage}\n        totalPosts={orderedPosts.length}\n        paginate={paginate}\n      />\n      <Sidebar />\n    </AuthState>\n  )\n}\n\nexport default Feed\n","import React, { useState } from 'react'\nimport { auth, provider, storage } from '../firebase'\nimport { updateUserProfile } from '../features/authSlice'\nimport {\n  Avatar,\n  Button,\n  CssBaseline,\n  TextField,\n  Paper,\n  Grid,\n  Typography,\n  makeStyles,\n  Modal,\n  IconButton,\n  Box,\n} from '@material-ui/core'\nimport SendIcon from '@material-ui/icons/Send'\nimport CameraIcon from '@material-ui/icons/Camera'\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle'\nimport { useDispatch } from 'react-redux'\nimport styles from '../modules/Auth.module.css'\nimport history from '../history'\n\nconst getModalStyle = () => {\n  const top = 50\n  const left = 50\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  }\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage:\n      'url(https://images.unsplash.com/photo-1606638436412-23517031f19a?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=668&q=80)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light'\n        ? theme.palette.grey[50]\n        : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  modal: {\n    outline: 'none',\n    position: 'absolute',\n    width: 400,\n    borderRadius: 10,\n    backgroundColor: 'white',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(10),\n  },\n}))\n\nconst Auth: React.FC = () => {\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [username, setUsername] = useState('')\n  const [isLogin, setIsLogin] = useState(true)\n  const [resetEmail, setResetEmail] = useState('')\n  const [openModal, setOpenModal] = useState(false)\n  const [avatarImage, setAvatarImage] = useState<File | null>(null)\n\n  const signUpEmail = async () => {\n    const authUser = await auth.createUserWithEmailAndPassword(email, password)\n    let url = ''\n\n    // file名の前に16桁のランダム値を追加する\n    if (avatarImage) {\n      const str =\n        'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n      const num = 16\n      const randomChar = Array.from(\n        crypto.getRandomValues(new Uint32Array(num))\n      )\n        .map((n) => str[n % str.length])\n        .join('')\n\n      const fileName = randomChar + '_' + avatarImage.name\n      await storage.ref(`avatars/${fileName}`).put(avatarImage)\n      url = await storage.ref('avatars').child(fileName).getDownloadURL()\n    }\n\n    await authUser.user?.updateProfile({\n      displayName: username,\n      photoURL: url,\n    })\n    dispatch(\n      updateUserProfile({\n        displayName: username,\n        photoUrl: url,\n        role: 'user'\n      })\n    )\n    await history.push('/feed')\n  }\n\n  const signInEmail = async () => {\n    await auth.signInWithEmailAndPassword(email, password)\n    if (email === 'admin@example.com') {\n      await history.push('/admin')\n    } else {\n      await history.push('/feed')\n    }\n  }\n\n  const signInGoogle = async () => {\n    await auth.signInWithPopup(provider).catch((err) => {\n      alert(err.message)\n    })\n  }\n\n  const sendResetEmail = async (e: React.MouseEvent<HTMLElement>) => {\n    await auth\n      .sendPasswordResetEmail(resetEmail)\n      .then(() => {\n        setOpenModal(false)\n        setResetEmail('')\n      })\n      .catch((err) => {\n        alert(err.message)\n        setResetEmail('')\n      })\n  }\n\n  const onChangeImageHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files![0]) {\n      setAvatarImage(e.target.files![0])\n      e.target.value = ''\n    }\n  }\n\n  const isLoginDisabled = !email || password.length < 6\n  const isRegisterDisabled =\n    !username || !email || password.length < 6 || !avatarImage\n\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\" data-testid=\"h1\">\n            {isLogin ? 'Login' : 'Register'}\n          </Typography>\n          <form className={classes.form} noValidate>\n            {!isLogin && (\n              <>\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  required\n                  fullWidth\n                  data-testid=\"username\"\n                  id=\"username\"\n                  label=\"Username\"\n                  name=\"username\"\n                  autoComplete=\"username\"\n                  autoFocus\n                  value={username}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setUsername(e.target.value)\n                  }}\n                />\n                <Box textAlign=\"center\">\n                  <IconButton>\n                    <label>\n                      <AccountCircleIcon\n                        fontSize=\"large\"\n                        className={\n                          avatarImage\n                            ? styles.login_addIconLoaded\n                            : styles.login_addIcon\n                        }\n                      />\n                      <input\n                        className={styles.login_hiddenIcon}\n                        type=\"file\"\n                        onChange={onChangeImageHandler}\n                      />\n                    </label>\n                  </IconButton>\n                </Box>\n              </>\n            )}\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              data-testid=\"email\"\n              id=\"email\"\n              aria-label=\"Email Address\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n              value={email}\n              onChange={(\n                e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n              ) => {\n                setEmail(e.target.value)\n              }}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              aria-label=\"Password\"\n              label=\"Password\"\n              type=\"password\"\n              data-testid=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              value={password}\n              onChange={(\n                e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n              ) => {\n                setPassword(e.target.value)\n              }}\n            />\n            <Button\n              disabled={isLogin ? isLoginDisabled : isRegisterDisabled}\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              data-testid=\"authButton\"\n              onClick={\n                isLogin\n                  ? async () => {\n                      try {\n                        await signInEmail()\n                      } catch (err) {\n                        alert(err.message)\n                      }\n                    }\n                  : async () => {\n                      try {\n                        await signUpEmail()\n                      } catch (err) {\n                        alert(err.message)\n                      }\n                    }\n              }\n            >\n              {isLogin ? 'Login' : 'Register'}\n            </Button>\n            <Grid container>\n              <Grid item xs>\n                <span onClick={() => setOpenModal(true)}>Forgot password?</span>\n              </Grid>\n              <Grid item aria-label=\"changeScreen\">\n                <span onClick={() => setIsLogin(!isLogin)}>\n                  {isLogin ? 'Create new account?' : 'Back to login'}\n                </span>\n              </Grid>\n            </Grid>\n            <Button\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              startIcon={<CameraIcon />}\n              onClick={signInGoogle}\n            >\n              Sign In with Google\n            </Button>\n          </form>\n          <Modal open={openModal} onClose={() => setOpenModal(false)}>\n            <div style={getModalStyle()} className={classes.modal}>\n              <div>\n                <TextField\n                  InputLabelProps={{ shrink: true }}\n                  type=\"email\"\n                  name=\"email\"\n                  label=\"Reset Email\"\n                  value={resetEmail}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setResetEmail(e.target.value)\n                  }}\n                />\n                <IconButton onClick={sendResetEmail}>\n                  <SendIcon />\n                </IconButton>\n              </div>\n            </div>\n          </Modal>\n        </div>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default Auth\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { useSelector } from 'react-redux'\nimport { selectAllUsers } from '../features/userSlice'\nimport { selectAllCategories } from '../features/categorySlice'\nimport { PostProps, convertPostingDateToJapanTime } from './Post'\nimport { Avatar } from '@material-ui/core'\n\nconst initialState = [{\n  _id: '',\n  uid: '',\n  categoryId: '',\n  title: '',\n  text: '',\n  image: '',\n  url: '',\n  fav: 0,\n  createdAt: null\n}]\n\nconst SearchResult: React.FC = () => {\n  const [postLists, setPostLists] = useState<PostProps[]>(initialState)\n\n  const q = useSelector((state: any) => state.queryParams).slice(-1)[0].values.q\n  const users = useSelector(selectAllUsers)\n  const categories = useSelector(selectAllCategories)\n\n  useEffect(() => {\n    fetchPostsDataByQueryParams()\n  }, [])\n\n  const orderdPosts = postLists\n    .slice()\n    .sort((a, b) =>\n      convertPostingDateToJapanTime(b.createdAt).localeCompare(\n        convertPostingDateToJapanTime(a.createdAt)\n      )\n    )\n\n  const fetchPostsDataByQueryParams = async () => {\n    const url = `/api/v1/search/posts?q=${q}`\n    try {\n      await axios.get(url).then((res) => {\n        setPostLists(res.data)\n      })\n    } catch (err) {\n      console.error(err)\n    }\n  }\n\n  const matchCategoriesIdAndCategoriesName = (categoryId: string) => {\n    return categories.find((category: { _id: string }) => category._id === categoryId)?.name\n  }\n\n  const matchUidAndPhotoUrl = (uid: string) => {\n    return users.find((user: { uid: string }) => user.uid === uid)?.photoUrl\n  }\n\n  return (\n    <div>\n      <h2>検索結果</h2>\n      {orderdPosts.map((post: PostProps) => (\n        <>\n          <Avatar src={matchUidAndPhotoUrl(post.uid)}/>\n          <p>{convertPostingDateToJapanTime(post.createdAt)}</p>\n          <h1>{post.title}</h1>\n          <p>{post.text}</p>\n          {post.image && (\n            <Avatar src={post.image} />\n          )}\n          <p>カテゴリー: {matchCategoriesIdAndCategoriesName(post.categoryId)}</p>\n        </>\n      ))}\n    </div>\n  )\n}\n\nexport default SearchResult\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { selectAllPosts, PostedData, deletePostWithSinglePostArgument } from '../features/postSlice'\nimport { selectAllCategories, fetchCategoriesData } from '../features/categorySlice'\nimport { selectAllUsers, fetchAvatars } from '../features/userSlice'\nimport { Avatar, TextField, Button } from '@material-ui/core'\nimport MessageIcon from '@material-ui/icons/Message'\nimport SendIcon from '@material-ui/icons/Send'\nimport { selectAllComments, addNewComment } from '../features/commentSlice'\nimport { Formik, Form } from 'formik'\nimport { selectUser } from '../features/authSlice'\nimport { unwrapResult } from '@reduxjs/toolkit'\nimport { Link } from 'react-router-dom'\nimport history from '../history'\nimport Sidebar from './Sidebar'\n\ninterface Comment {\n  _id: string,\n  uid: string,\n  photoUrl: string,\n  text: string,\n  createdAt: any\n}\n\nconst initialValues = {\n  _id: '',\n  uid: '',\n  photoUrl: '',\n  text: '',\n  createdAt: null\n}\n\nconst SinglePostPage: React.FC = ({ match }: any) => {\n  const { id } = match.params\n\n  const [openComments, setOpenComments] = useState(false)\n\n  const posts = useSelector(selectAllPosts)\n  const categories = useSelector(selectAllCategories)\n  const users = useSelector(selectAllUsers)\n  const comments = useSelector(selectAllComments)\n  const authUser = useSelector(selectUser)\n\n  const dispatch = useDispatch()\n\n  const singlePost = posts.find((post : { _id: string }) => post._id === id)\n\n  const userStatus = useSelector((state: any) => state.userData.status)\n  const categoriesStatus = useSelector((state: any) => state.categoriesData.status)\n\n  useEffect(() => {\n    if (categoriesStatus === 'idle') {\n      dispatch(fetchCategoriesData())\n    }\n    if (userStatus === 'idle') {\n      dispatch(fetchAvatars())\n    }\n  }, [categoriesStatus, userStatus, dispatch])\n\n  const matchCategoriesIdAndCategoriesName = (categoryId: string) => {\n    return categories.find((category: { _id: string }) => category._id === categoryId)?.name\n  }\n\n  const fetchAuthorData = users.find((user: { uid: string }) => user.uid === singlePost.uid)\n\n  const commentsOnThisPost = comments.filter((comment: { postId: string }) => comment.postId === singlePost._id)\n\n  // コメントした人のuidから名前を特定する\n  const matchUidAndUsername = (uid: string) => {\n    return users.find((user: { uid: string }) => user.uid === uid)?.username\n  }\n\n  const onSaveCommentClicked = async (values: Comment) => {\n    try {\n      const newValues = { \n        ...values, \n        photoUrl: authUser.photoUrl, \n        uid: authUser.uid, \n        postId: singlePost._id \n      }\n      const resultAction = await dispatch(addNewComment(newValues))\n      unwrapResult(resultAction as any)\n    } catch (err) {\n      console.error(err)\n    }\n  }\n\n  const findOwnPostData = posts.find(\n    (post: { uid: string }) => post.uid === authUser.uid\n  )\n\n  const onDeletePostClicked = async (singlePost: PostedData) => {\n    if (window.confirm('記事を削除してもよろしいですか？')) {\n      dispatch(deletePostWithSinglePostArgument(singlePost))\n      history.push('/feed')\n    }\n  }\n\n  const findAuthorName = (uid: string) => {\n    return users.find((user: { uid: string }) => user.uid === uid)?.username\n  }\n  \n  return (\n    <div>\n      <Avatar src={fetchAuthorData.photoUrl}/>\n      <p>\n        <Link to={`/user/profile/${singlePost.uid}`}>\n          Author: {findAuthorName(singlePost.uid)}\n        </Link>\n      </p>\n      <h1>{singlePost.title}</h1>\n      <p>{singlePost.text}</p>\n      {singlePost.image && (\n        <Avatar src={singlePost.image}/>\n      )}\n      <p>カテゴリー： {matchCategoriesIdAndCategoriesName(singlePost.categoryId)}</p>\n      {findOwnPostData?.uid === singlePost.uid ? (\n        <>\n          <button>\n            <Link to={`/post/edit/${singlePost._id}`}>編集する</Link>\n          </button>\n          <button onClick={() => onDeletePostClicked(singlePost)}>削除する</button>\n        </>\n      ) : (\n        <>\n        </>\n      )}\n      <MessageIcon onClick={() => setOpenComments(!openComments)} />\n      {openComments && (\n        <>\n          {commentsOnThisPost.map((com: Comment) => (\n            <div key={com._id}>\n              <Avatar src={com.photoUrl}/>\n              <span>@{matchUidAndUsername(com.uid)}</span>\n              <span>{com.text}</span>\n            </div>\n          ))}\n          <Formik\n            initialValues={initialValues}\n            onSubmit={(values: Comment) => {\n              onSaveCommentClicked(values)\n            }}\n          >\n            {({ values, handleChange }) => (\n              <>\n                <Form>\n                  <TextField \n                    variant=\"outlined\"\n                    id=\"outlined-basic\"\n                    label=\"コメント\"\n                    name=\"text\"\n                    type=\"text\"\n                    value={values.text}\n                    onChange={handleChange}\n                    required\n                  />\n                </Form>\n                <Button type=\"submit\">\n                  <SendIcon />\n                </Button>\n              </>\n            )}\n          </Formik>\n        </>\n      )}\n      <Sidebar />\n    </div>\n  )\n}\n\nexport default SinglePostPage\n","import React, { useState, useEffect } from 'react'\nimport { \n  Container, \n  Typography, \n  TextField, \n  MenuItem, \n  Box, \n  IconButton, \n  Button,\n  makeStyles\n} from '@material-ui/core'\nimport { Formik, Form } from 'formik'\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectAllCategories, fetchCategoriesData } from '../features/categorySlice';\nimport { Category } from './Sidebar';\nimport { PostedData, updatePost } from '../features/postSlice'\nimport history from '../history'\nimport { unwrapResult } from '@reduxjs/toolkit';\nimport { storage } from '../firebase'\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}))\n\nconst EditPost: React.FC = ({ match }: any) => {\n  const { id } = match.params\n  const singlePost = useSelector((state: any) => \n    state.postData.posts.find((post: { _id: string }) => post._id === id)\n  )\n\n  const initialValues: PostedData = {\n    _id: singlePost._id,\n    uid: singlePost.uid,\n    title: singlePost.title,\n    text: singlePost.text,\n    categoryId: singlePost.categoryId,\n    url: singlePost.url,\n    fav: singlePost.fav,\n    image: singlePost.image\n  }\n\n  const classes = useStyles()\n  const [postImage, setPostImage] = useState<File | null>(null)\n\n  const categories = useSelector(selectAllCategories)\n\n  const categoriesStatus = useSelector((state: any) => state.categoriesData.status)\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    if (categoriesStatus === 'idle') {\n      dispatch(fetchCategoriesData())\n    }\n  }, [categoriesStatus, dispatch])\n\n  const onUpdatePostClicked = async (values: PostedData) => {\n    let imageUrl = ''\n\n    if (postImage) {\n      const str = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n      const num = 16\n      const randomChar = Array.from(crypto.getRandomValues(new Uint32Array(num)))\n       .map((n) => str[n % str.length])\n       .join('')\n      const fileName = randomChar + '_' + postImage.name\n      await storage.ref(`images/${fileName}`).put(postImage)\n      imageUrl = await storage.ref('images').child(fileName).getDownloadURL()\n\n      try {\n        const newValues = { ...values, image: imageUrl }\n        const resultAction = await dispatch(updatePost(newValues))\n        unwrapResult(resultAction as any)\n        history.push('/feed')\n      } catch (err) {\n        console.error(err)\n      }\n    } else {\n      try {\n        const newValues = { ...values, image: '' }\n        const resultAction = await dispatch(updatePost(newValues))\n        unwrapResult(resultAction as any)\n        history.push('/feed')\n      } catch (err) {\n        console.error(err)\n      }\n    }\n\n  }\n\n  const onChangeImageHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files![0]) {\n      setPostImage(e.target.files![0])\n      e.target.value = ''\n    }\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <Typography component=\"h1\" variant=\"h6\">\n        記事を編集する\n      </Typography>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={(values: PostedData) => {\n          onUpdatePostClicked(values)\n        }}\n      >\n        {({ values, handleChange }) => (\n          <Form>\n            <TextField \n              fullWidth \n              variant=\"outlined\"\n              id=\"outlined-basic\"\n              margin=\"normal\"\n              label=\"商品名\"\n              name=\"title\"\n              type=\"text\"\n              value={values.title}\n              onChange={handleChange}\n              required\n            />\n            <TextField \n              fullWidth \n              variant=\"outlined\"\n              id=\"outlined-basic\"\n              margin=\"normal\"\n              label=\"本文\"\n              name=\"text\"\n              type=\"text\"\n              multiline\n              rows={10}\n              value={values.text}\n              onChange={handleChange}\n              required\n            />\n            <TextField \n              fullWidth \n              select\n              variant=\"outlined\"\n              id=\"outlined-basic\"\n              margin=\"normal\"\n              label=\"カテゴリー\"\n              name=\"categoryId\"\n              type=\"text\"\n              value={values.categoryId}\n              onChange={handleChange}\n              required\n            >\n              {categories.map((category: Category) => (\n                <MenuItem key={category.name} value={category._id}>\n                  {category.name}\n                </MenuItem>\n              ))}\n            </TextField>\n            <Box>\n              <IconButton\n                color=\"primary\"\n                aria-label=\"upload image\"\n                component=\"span\"\n              >\n                <label>\n                  <PhotoCamera fontSize=\"large\"/>\n                  <input \n                    type=\"file\"\n                    onChange={onChangeImageHandler}\n                  />\n                </label>\n              </IconButton>\n            </Box>\n            <TextField \n              fullWidth \n              variant=\"outlined\"\n              id=\"outlined-basic\"\n              margin=\"normal\"\n              label=\"URL\"\n              name=\"url\"\n              type=\"text\"\n              value={values.url}\n              onChange={handleChange}\n              required\n            />\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              fullWidth\n            >\n              投稿\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Container>\n  )\n}\n\nexport default EditPost\n","import React, { useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { selectAllUsers, Profile } from '../features/userSlice'\nimport { selectAllPosts, PostedData, deletePostWithPostArgument } from '../features/postSlice'\nimport { selectAllCategories, fetchCategoriesData } from '../features/categorySlice'\nimport { Avatar } from '@material-ui/core'\nimport { PostProps } from './Post'\nimport { Link } from 'react-router-dom'\nimport { selectUser } from '../features/authSlice'\nimport Paginations from './Paginations'\nimport Sidebar from './Sidebar'\n\nconst UserProfile: React.FC = ({ match }: any) => {\n  const { id } = match.params\n\n  const [currentPage, setCurrentPage] = useState(1)\n  const [postsPerPage] = useState(5)\n\n  const users = useSelector(selectAllUsers)\n  const posts = useSelector(selectAllPosts)\n  const categories = useSelector(selectAllCategories)\n  const authUser = useSelector(selectUser)\n\n  const categoriesStatus = useSelector((state: any) => state.categoriesData.status)\n\n  const dispatch = useDispatch()\n\n  const singleUser: Profile = users.find((user: { uid: string }) => user.uid === id)\n  const usersPosts = posts.filter((post: { uid: string }) => post.uid === singleUser.uid)\n\n  const orderedPosts = usersPosts\n    .slice()\n    .sort((a: { createdAt: string }, b: { createdAt: string }) => \n      b.createdAt.localeCompare(a.createdAt)\n    )\n\n  const indexOfLastPost = currentPage * postsPerPage\n  const indexOfFirstPost = indexOfLastPost - postsPerPage\n  \n  const currentPosts = orderedPosts.slice(indexOfFirstPost, indexOfLastPost)\n  const paginate = (pageNumber: number) => setCurrentPage(pageNumber)\n\n  useEffect(() => {\n    if (categoriesStatus === 'idle') {\n      dispatch(fetchCategoriesData())\n    }\n  }, [categoriesStatus, dispatch])\n\n  const matchCategoriesIdAndCategoriesName = (categoryId: string) => {\n    return categories.find((category: { _id: string }) => category._id === categoryId)?.name\n  }\n\n  const findOwnPostData = posts.find((post: { uid: string }) => post.uid === authUser.uid)\n\n  const onDeletePostClicked = async (post: PostedData) => {\n    if (window.confirm('記事を削除してもよろしいですか？')) {\n      dispatch(deletePostWithPostArgument(post))\n    }\n  }\n  return (\n    <div>\n      <Avatar src={singleUser.photoUrl}/>\n      <p>ユーザー名：{singleUser.username}</p>\n      <p>所属： {singleUser.company}</p>\n      <p>役職： {singleUser.position}</p>\n      <p>自己紹介： {singleUser.bio}</p>\n      <p>{singleUser.url}</p>\n      <h1>{singleUser.username}さんの投稿記事</h1>\n      {usersPosts &&\n        currentPosts.map((post: PostProps) => (\n          <>\n            <h1>{post.title}</h1>\n            <p>{post.text}</p>\n            <p>カテゴリー： {matchCategoriesIdAndCategoriesName(post.categoryId)}</p>\n            <Link to={`/post/detail/${post._id}`}>続きを読む</Link>\n            {findOwnPostData?.uid === singleUser.uid ? (\n              <>\n                <button>\n                  <Link to={`/post/edit/${post._id}`}>編集する</Link>\n                </button>\n                <button onClick={() => onDeletePostClicked(post)}>削除する</button>\n              </>\n            ) : (\n              <></>\n            )}\n          </>\n        ))\n      }\n      <Paginations \n        postsPerPage={postsPerPage}\n        totalPosts={orderedPosts.length}\n        paginate={paginate}\n      />\n      <Sidebar />\n    </div>\n  )\n}\n\nexport default UserProfile\n","import React, { useState } from 'react'\nimport { \n  makeStyles, \n  Typography, \n  Button, \n  TextField,\n  Container,\n  Box,\n  IconButton\n} from '@material-ui/core'\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport { Formik, Form } from 'formik'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { unwrapResult } from '@reduxjs/toolkit'\nimport { selectAllUsers, Profile, updateUserProfile } from '../features/userSlice'\nimport { storage } from '../firebase';\nimport history from '../history';\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}))\n\nconst EditProfile: React.FC = ({ match }: any) => {\n  const [postImage, setPostImage] = useState<File | null>(null)\n  const { id } = match.params\n  const classes = useStyles()\n\n  const users = useSelector(selectAllUsers)\n\n  const dispatch = useDispatch()\n\n  const singleUser: Profile = users.find((user: { uid: string }) => user.uid === id)\n\n  const initialValues: Profile = {\n    uid: singleUser.uid,\n    username: singleUser.username,\n    photoUrl: singleUser.photoUrl,\n    company: singleUser.company,\n    position: singleUser.position,\n    bio: singleUser.bio,\n    url: singleUser.url\n  }\n\n  console.log('uid', singleUser.uid)\n\n  const onUpdateProfileClicked = async (values: Profile) => {\n    let imageUrl = ''\n\n    if (postImage) {\n      const str = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n      const num = 16\n      const randomChar = Array.from(crypto.getRandomValues(new Uint32Array(num)))\n       .map((n) => str[n % str.length])\n       .join('')\n      const fileName = randomChar + '_' + postImage.name\n      await storage.ref(`images/${fileName}`).put(postImage)\n      imageUrl = await storage.ref('images').child(fileName).getDownloadURL()\n\n      try {\n        const newValues = { ...values, image: imageUrl, uid: singleUser.uid }\n        const resultAction = await dispatch(updateUserProfile(newValues))\n        unwrapResult(resultAction as any)\n        history.push('/feed')\n      } catch (err) {\n        console.error(err)\n      }\n    } else {\n      try {\n        const newValues = { ...values, image: singleUser.photoUrl, uid: singleUser.uid }\n        const resultAction = await dispatch(updateUserProfile(newValues))\n        unwrapResult(resultAction as any)\n        history.push('/feed')\n      } catch (err) {\n        console.error(err)\n      }\n    }\n  }\n\n  const onChangeImageHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files![0]) {\n      setPostImage(e.target.files![0])\n      e.target.value = ''\n    }\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <Typography component=\"h1\" variant=\"h6\">\n        プロフィールを編集する\n      </Typography>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={(values: Profile) => {\n          onUpdateProfileClicked(values)\n        }}\n      >\n        {({ values, handleChange }) => (\n          <Form>\n            <TextField \n              fullWidth \n              variant=\"outlined\"\n              id=\"outlined-basic\"\n              margin=\"normal\"\n              label=\"username\"\n              name=\"username\"\n              type=\"text\"\n              value={values.username}\n              onChange={handleChange}\n              required\n            />\n            <Box>\n              <IconButton\n                color=\"primary\"\n                aria-label=\"upload image\"\n                component=\"span\"\n              >\n                <label>\n                  <PhotoCamera fontSize=\"large\"/>\n                  <input \n                    type=\"file\"\n                    onChange={onChangeImageHandler}\n                  />\n                </label>\n              </IconButton>\n            </Box>\n            <TextField \n              fullWidth \n              variant=\"outlined\"\n              id=\"outlined-basic\"\n              margin=\"normal\"\n              label=\"company\"\n              name=\"company\"\n              type=\"text\"\n              value={values.company}\n              onChange={handleChange}\n              required\n            />\n            <TextField \n              fullWidth \n              variant=\"outlined\"\n              id=\"outlined-basic\"\n              margin=\"normal\"\n              label=\"役職\"\n              name=\"position\"\n              type=\"text\"\n              value={values.position}\n              onChange={handleChange}\n              required\n            />\n            <TextField \n              fullWidth \n              variant=\"outlined\"\n              id=\"outlined-basic\"\n              margin=\"normal\"\n              label=\"bio\"\n              name=\"bio\"\n              type=\"text\"\n              multiline\n              rows={10}\n              value={values.bio}\n              onChange={handleChange}\n              required\n            />\n            <TextField \n              fullWidth \n              variant=\"outlined\"\n              id=\"outlined-basic\"\n              margin=\"normal\"\n              label=\"URL\"\n              name=\"url\"\n              type=\"text\"\n              value={values.url}\n              onChange={handleChange}\n              required\n            />\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              fullWidth\n            >\n              投稿\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Container>\n  )\n}\n\nexport default EditProfile\n","import React from 'react'\n\nconst NotFound: React.FC = () => {\n  return (\n    <div>\n      <h1>404 - Not Found!</h1>\n    </div>\n  )\n}\n\nexport default NotFound\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { selectAllPosts, PostedData, deletePostWithPostArgument } from '../features/postSlice'\nimport { selectAllCategories } from '../features/categorySlice'\nimport { selectAllUsers } from '../features/userSlice'\nimport { selectUser } from '../features/authSlice'\nimport { PostProps } from './Post'\nimport { Link } from 'react-router-dom'\nimport { Avatar } from '@material-ui/core'\nimport Sidebar from './Sidebar'\n\nconst CategoryPage: React.FC = ({ match }: any) => {\n  const { id } = match.params\n\n  const posts = useSelector(selectAllPosts)\n  const categories = useSelector(selectAllCategories)\n  const users = useSelector(selectAllUsers)\n  const authUser = useSelector(selectUser)\n\n  const dispatch = useDispatch()\n\n  const categoriesPosts = posts.filter(\n    (categoriesPost: { categoryId: string }) => categoriesPost.categoryId === id\n  )\n\n  const getCategoriesName = categories.find(\n    (category : { _id: string }) => category._id === id\n  ).name\n\n  const orderedPosts = categoriesPosts\n    .slice()\n    .sort((a: { createdAt: string }, b: { createdAt: string }) =>\n      b.createdAt.localeCompare(a.createdAt)\n    )\n  \n  const matchCategoriesIdAndCategoriesName = (categoryId: string) => {\n    return categories.find((category: { _id: string }) => category._id === categoryId)?.name\n  }\n\n  const findAuthorName = (uid: string) => {\n    return users.find((user: { uid: string }) => user.uid === uid)?.username\n  }\n\n  const matchUidAndPhotoUrl = (uid: string) => {\n    return users.find((user: { uid: string }) => user.uid === uid)?.photoUrl\n  }\n\n  const findOwnPostData = posts.find(\n    (post : { uid: string }) => post.uid === authUser.uid\n  )\n\n  const onDeletePostClicked = async (post: PostedData) => {\n    if (window.confirm('記事を削除してもよろしいですか？')) {\n      dispatch(deletePostWithPostArgument(post))\n    }\n  }\n\n  return (\n    <div>\n      <h1>{getCategoriesName}</h1>\n      {orderedPosts[0]?._id && (\n        <>\n          {orderedPosts?.map((post : PostProps) => (\n            <>\n              <Avatar src={matchUidAndPhotoUrl(post.uid)} />\n              <p>\n                <Link to={`/user/profile/${post.uid}`}>\n                  Author: {findAuthorName(post.uid)}\n                </Link>\n              </p>\n              <h1>{post.title}</h1>\n              <p>{post.text}</p>\n              <p>カテゴリー： {matchCategoriesIdAndCategoriesName(post.categoryId)}</p>\n              <Link to={`/post/detail/${post._id}`}>続きを読む</Link>\n              {findOwnPostData?.uid === post.uid ? (\n                <>\n                  <button>\n                    <Link to={`/post/edit/${post._id}`}>編集する</Link>\n                  </button>\n                  <button onClick={() => onDeletePostClicked(post)}>削除する</button>\n                </>\n              ) : (\n                <></>\n              )}\n            </>\n          ))}\n        </>\n      )}\n      <Sidebar />\n    </div>\n  )\n}\n\nexport default CategoryPage\n","import React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { auth } from '../../firebase'\nimport history from '../../history'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { fetchPostData } from '../../features/postSlice'\nimport { fetchAvatars } from '../../features/userSlice'\nimport { fetchCategoriesData } from '../../features/categorySlice'\n\nconst AdminScreen: React.FC = () => {\n  const postStatus = useSelector((state: any) => state.postData.status)\n  const userStatus = useSelector((state: any) => state.userData.status)\n  const categoriesStatus = useSelector((state: any) => state.categoriesData.status)\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    if (postStatus === 'idle') {\n      dispatch(fetchPostData())\n    }\n    if (userStatus === 'idle') {\n      dispatch(fetchAvatars())\n    }\n    if (categoriesStatus === 'idle') {\n      dispatch(fetchCategoriesData())\n    }\n  }, [postStatus, userStatus,categoriesStatus, dispatch])\n  return (\n    <div>\n      <h1>管理画面</h1>\n      <button\n        onClick={async () => {\n          await auth.signOut()\n          await history.push('/login')\n        }}\n      >\n        logout\n      </button>\n      <p>\n        <Link to={'/admin/post'}>投稿記事管理</Link>\n        <Link to={'/admin/user'}>ユーザー管理</Link>\n      </p>\n    </div>\n  )\n}\n\nexport default AdminScreen\n","import React from 'react'\nimport { selectAllUsers, Profile, deleteUser } from '../../features/userSlice'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { deleteUsersPost } from '../../features/postSlice'\n\nconst AdminUsersList: React.FC = () => {\n  const users = useSelector(selectAllUsers)\n  const dispatch = useDispatch()\n\n  const adminUsers = users.filter(\n    (user: { role: string }) => user.role === 'user'\n  )\n\n  console.log(adminUsers)\n\n  const onDeleteUserClicked = async (user: Profile) => {\n    if (window.confirm('ユーザーを削除してもよろしいですか？')) {\n      await dispatch(deleteUser(user))\n      await dispatch(deleteUsersPost(user))\n    }\n  }\n\n  return (\n    <div>\n      <h1>ユーザー管理画面</h1>\n      {adminUsers && (\n        <>\n          {adminUsers.map((user: Profile) => (\n            <li key={user.uid}>\n              <ul>{user.username}</ul>\n              <button onClick={() => onDeleteUserClicked(user)}>削除</button>\n            </li>\n          ))}\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default AdminUsersList\n","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectAllPosts } from '../../features/postSlice'\nimport Paginations from '../Paginations'\nimport { PostProps } from '../Post'\nimport { Link } from 'react-router-dom'\n\nconst AdminPostsList: React.FC = () => {\n  const [currentPage, setCurrentPage] = useState(1)\n  const [postsPerPage] = useState(5)\n\n  const posts = useSelector(selectAllPosts)\n\n  const orderedPosts = posts\n    .slice()\n    .sort((a: { createdAt: string }, b: { createdAt: string }) =>\n      b.createdAt.localeCompare(a.createdAt)\n    )\n\n  const indexOfLastPost = currentPage * postsPerPage\n  const indexOfFirstPost = indexOfLastPost - postsPerPage\n  \n  const currentPosts = orderedPosts.slice(indexOfFirstPost, indexOfLastPost)\n  const paginate = (pageNumber: number) => setCurrentPage(pageNumber)\n\n  return (\n    <div>\n      <h1>投稿記事管理画面</h1>\n      {currentPosts[0]?._id && (\n        <>\n          {currentPosts.map((post: PostProps) => (\n            <>\n              <h3>{post.title}</h3>\n              <Link to={`/admin/post/${post._id}`}>詳細を確認する</Link>\n            </>\n          ))}\n        </>\n      )}\n      <Paginations \n        postsPerPage={postsPerPage}\n        totalPosts={orderedPosts.length}\n        paginate={paginate}\n      />\n    </div>\n  )\n}\n\nexport default AdminPostsList\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { selectAllPosts, PostedData, deletePostWithSinglePostArgument } from '../../features/postSlice'\nimport { selectAllUsers } from '../../features/userSlice'\nimport { selectAllCategories } from '../../features/categorySlice'\nimport { Avatar } from '@material-ui/core'\nimport history from '../../history'\n\nconst AdminPostDetail: React.FC = ({ match }: any) => {\n  const { id } = match.params\n\n  const posts = useSelector(selectAllPosts)\n  const categories = useSelector(selectAllCategories)\n  const users = useSelector(selectAllUsers)\n\n  const dispatch = useDispatch()\n\n  const singlePost: PostedData = posts.find((post : { _id: string }) => post._id === id)\n\n  const matchCategoriesIdAndCategoriesName = (categoryId: string) => {\n    return categories.find((category: { _id: string }) => category._id === categoryId)?.name\n  }\n\n  const findAuthorName = (uid: string) => {\n    return users.find((user: { uid: string }) => user.uid === uid)?.username\n  }\n\n  const onDeletePostClicked = async (singlePost: PostedData) => {\n    if (window.confirm('記事を削除してよろしいですか？')) {\n      dispatch(deletePostWithSinglePostArgument(singlePost))\n      history.push('/admin/post')\n    }\n  }\n \n  return (\n    <div>\n      <h1>記事詳細</h1>\n      <p>Author: {findAuthorName(singlePost.uid)}</p>\n      <h1>{singlePost.title}</h1>\n      <p>{singlePost.text}</p>\n      {singlePost.image && (\n        <Avatar src={singlePost.image}/>\n      )}\n      <p>カテゴリー： {matchCategoriesIdAndCategoriesName(singlePost.categoryId)}</p>\n      <button onClick={() => onDeletePostClicked(singlePost)}>削除</button>\n    </div>\n  )\n}\n\nexport default AdminPostDetail\n","import React from 'react'\nimport { Link, Router } from 'react-router-dom'\nimport history from '../history'\n\nconst Home: React.FC = () => {\n  return (\n    <div>\n      <h1>あなたのビジネスに役立つICT製品がきっと見つかる!</h1>\n      <div>\n        <p>\n          <Router history={history}>\n            <Link to={'/login'}>\n              ログイン・新規登録はこちらから\n            </Link>\n          </Router>\n        </p>\n        <h3>幅広い製品情報を網羅!</h3>\n      </div>\n    </div>\n  )\n}\n\nexport default Home\n","import React from 'react'\nimport { Switch, Route, BrowserRouter } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\nimport AddPost from './components/AddPost'\nimport Feed from './components/Feed'\nimport Auth from './components/Auth'\nimport SearchResult from './components/SearchResult'\nimport SinglePostPage from './components/SinglePostPage'\nimport EditPost from './components/EditPost'\nimport UserProfile from './components/UserProfile'\nimport EditProfile from './components/EditProfile'\nimport NotFound from './components/NotFound'\nimport CategoryPage from './components/CategoryPage'\nimport AdminScreen from './components/Admin/AdminScreen'\nimport AdminUsersList from './components/Admin/AdminUsersList'\nimport AdminPostsList from './components/Admin/AdminPostsList'\nimport AdminPostDetail from './components/Admin/AdminPostDetail'\nimport Home from './components/Home'\n\nconst Routes: React.FC = () => {\n  const q = useSelector((state: any) => state.queryParams).slice(-1)[0].values.q\n\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/login\" component={Auth} />\n      <Route exact path=\"/index.html\" component={Home} />\n      <Route exact path=\"/feed\" component={Feed} />\n      <Route exact path=\"/add\" component={AddPost} />\n      <Route exact path={`/search?q=${q}`} component={SearchResult} />\n      <Route exact path={'/post/detail/:id'} component={SinglePostPage} />\n      <Route exact path=\"/post/edit/:id\" component={EditPost} />\n      <Route exact path=\"/user/profile/:id\" component={UserProfile} />\n      <Route exact path=\"/user/edit/:id\" component={EditProfile} />\n      <Route exact path=\"/category/:id\" component={CategoryPage} />\n      <Route exact path=\"/admin\" component={AdminScreen} />\n      <Route exact path=\"/admin/user\" component={AdminUsersList} />\n      <Route exact path=\"/admin/post\" component={AdminPostsList} />\n      <Route exact path=\"/admin/post/:id\" component={AdminPostDetail} />\n      <Route component={NotFound} />\n    </Switch>\n  )\n}\n\nexport default Routes\n","import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { login, logout } from './features/authSlice'\nimport { auth } from './firebase'\nimport Navbar from './components/Navbar'\nimport { Router } from 'react-router-dom'\nimport Routes from './Routes'\nimport history from './history'\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    const unSub = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        dispatch(\n          login({\n            uid: authUser.uid,\n            photoUrl: authUser.photoURL,\n            displayName: authUser.displayName,\n          })\n        )\n      } else {\n        dispatch(logout())\n      }\n    })\n    // cleanup関数\n    return () => {\n      unSub()\n    }\n  }, [dispatch])\n\n  return (\n    <Router history={history}>\n      <Navbar />\n      <Routes />\n    </Router>\n  )\n}\n\nexport default App\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport authReducer from '../features/authSlice';\nimport postsReducer from '../features/postSlice'\nimport usersReducer from '../features/userSlice'\nimport categoryReducer from '../features/categorySlice'\nimport searchReducer from '../features/searchSlice'\nimport commentReducer from '../features/commentSlice'\n\nexport const store = configureStore({\n  reducer: {\n    auth: authReducer,\n    postData: postsReducer,\n    userData: usersReducer,\n    categoriesData: categoryReducer,\n    queryParams: searchReducer,\n    commentData: commentReducer\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login_toggleMode\":\"Auth_login_toggleMode__1q3nF\",\"login_modal\":\"Auth_login_modal__2XUe2\",\"login_reset\":\"Auth_login_reset__1CRmT\",\"login_hiddenIcon\":\"Auth_login_hiddenIcon__3EEOO\",\"login_addIcon\":\"Auth_login_addIcon__2hF6-\",\"login_addIconLoaded\":\"Auth_login_addIconLoaded__30_sD\"};"],"sourceRoot":""}