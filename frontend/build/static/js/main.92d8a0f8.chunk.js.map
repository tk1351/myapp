{"version":3,"sources":["features/authSlice.ts","firebase.ts","history.ts","features/categorySlice.ts","features/postSlice.ts","components/Spinner.tsx","components/AuthState.tsx","components/AddPost.tsx","features/userSlice.ts","components/Post.tsx","features/commentSlice.ts","components/Paginations.tsx","components/Sidebar.tsx","components/Feed.tsx","components/Auth.tsx","components/SearchResult.tsx","components/SinglePostPage.tsx","components/EditPost.tsx","components/UserProfile.tsx","components/EditProfile.tsx","components/NotFound.tsx","components/CategoryPage.tsx","components/Admin/AdminScreen.tsx","components/Admin/AdminUsersList.tsx","components/Admin/AdminPostsList.tsx","components/Admin/AdminPostDetail.tsx","components/Home.tsx","Routes.tsx","features/searchSlice.ts","components/Search.tsx","components/Navbar.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","modules/Auth.module.css"],"names":["authSlice","createSlice","name","initialState","user","uid","photoUrl","displayName","role","reducers","login","state","action","payload","logout","updateUserProfile","actions","selectUser","auth","firebaseApp","firebase","initializeApp","apiKey","process","authDomain","projectId","databaseURL","storageBucket","messagingSenderId","appId","firestore","storage","provider","GoogleAuthProvider","createBrowserHistory","fetchCategoriesData","createAsyncThunk","a","axios","get","res","data","categorySlice","categories","status","error","extraReducers","pending","fulfilled","concat","rejected","message","selectAllCategories","categoriesData","fetchPostData","addNewPost","newValues","post","updatePost","url","_id","put","deletePost","props","delete","deletePostWithPostArgument","deletePostWithSinglePostArgument","singlePost","deleteUsersPost","postsSlice","posts","push","postData","findIndex","splice","deletePostData","meta","arg","deletePostDataWithPostArgument","deletePostDataWithSinglePostArgument","deleteUsersPostData","selectAllPosts","useStyles","makeStyles","theme","createStyles","root","display","marginLeft","spacing","Spinner","classes","Container","component","maxWidth","className","CircularProgress","AuthState","children","useState","isLoading","isLogin","setIsLogin","useEffect","unsub","onAuthStateChanged","history","to","form","width","marginTop","submit","margin","initialValues","title","text","categoryId","fav","createdAt","AddPost","postImage","setPostImage","useSelector","categoriesStatus","dispatch","useDispatch","onSavePostClicked","values","imageUrl","str","randomChar","Array","from","crypto","getRandomValues","Uint32Array","map","n","length","join","fileName","ref","child","getDownloadURL","image","resultAction","unwrapResult","console","onChangeImageHandler","e","target","files","value","Typography","variant","onSubmit","handleChange","TextField","fullWidth","id","label","type","onChange","required","multiline","rows","select","category","MenuItem","Box","IconButton","color","aria-label","fontSize","Button","fetchAvatars","deleteUser","usersSlice","users","profileData","deleteUsersData","selectAllUsers","userData","convertPostingDateToJapanTime","moment","locale","format","Post","authUser","findOwnPostData","find","username","findAuthorName","Avatar","src","matchCategoriesIdAndCategoriesName","onClick","window","confirm","onDeletePostClicked","fetchCommentsData","addNewComment","commentSlice","comments","selectAllComments","commentData","Paginations","postsPerPage","totalPosts","paginate","pageNumbers","i","Math","ceil","number","Sidebar","Feed","currentPage","setCurrentPage","postStatus","userStatus","commentsStatus","orderedPosts","slice","sort","b","localeCompare","indexOfLastPost","indexOfFirstPost","currentPosts","photoURL","addUserInfo","log","matchUidAndPhotoUrl","pageNumber","height","backgroundImage","backgroundRepeat","backgroundColor","palette","grey","backgroundSize","backgroundPosition","paper","flexDirection","alignItems","avatar","secondary","main","modal","outline","position","borderRadius","boxShadow","shadows","padding","Auth","email","setEmail","password","setPassword","setUsername","resetEmail","setResetEmail","openModal","setOpenModal","avatarImage","setAvatarImage","signUpEmail","createUserWithEmailAndPassword","updateProfile","signInEmail","signInWithEmailAndPassword","signInGoogle","signInWithPopup","catch","err","alert","sendResetEmail","sendPasswordResetEmail","then","isLoginDisabled","isRegisterDisabled","Grid","container","CssBaseline","item","xs","sm","md","Paper","elevation","square","data-testid","noValidate","autoComplete","autoFocus","textAlign","styles","login_addIconLoaded","login_addIcon","login_hiddenIcon","disabled","startIcon","Modal","open","onClose","style","top","left","transform","InputLabelProps","shrink","SearchResult","postLists","setPostLists","q","queryParams","fetchPostsDataByQueryParams","orderdPosts","SinglePostPage","match","params","openComments","setOpenComments","fetchAuthorData","commentsOnThisPost","filter","comment","postId","matchUidAndUsername","onSaveCommentClicked","com","EditPost","onUpdatePostClicked","UserProfile","singleUser","usersPosts","company","bio","EditProfile","onUpdateProfileClicked","NotFound","CategoryPage","categoriesPosts","categoriesPost","getCategoriesName","AdminScreen","signOut","AdminUsersList","adminUsers","onDeleteUserClicked","AdminPostsList","AdminPostDetail","Home","Routes","exact","path","searchSlice","searchPosts","search","shape","fade","common","white","marginRight","breakpoints","up","searchIcon","pointerEvents","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","create","initialValue","Search","setQueryParam","searchUsingQueryParam","pathname","InputBase","placeholder","input","inputProps","grow","flexGrow","menuButton","sectionDesktop","sectionMobile","Navbar","findAuthUsersRole","isAuthMenuList","key","isNotAuthMenuList","adminMenuList","isAuthName","AppBar","Toolbar","edge","noWrap","menu","App","unSub","store","configureStore","reducer","authReducer","postsReducer","usersReducer","categoryReducer","searchReducer","commentReducer","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.92d8a0f8.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../app/store'\n\ninterface User {\n  displayName: string\n  photoUrl: string\n  role: string\n}\n\nconst initialState = {\n  user: {\n    uid: '',\n    photoUrl: '',\n    displayName: '',\n    role: ''\n  }\n}\n\nexport const authSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload\n    },\n    logout: (state) => {\n      state.user = { uid: '', photoUrl: '', displayName: '', role: '' }\n    },\n    updateUserProfile: (state, action: PayloadAction<User>) => {\n      state.user.displayName = action.payload.displayName\n      state.user.photoUrl = action.payload.photoUrl\n      state.user.role = action.payload.role\n    }\n  }\n})\n\nexport const { login, logout, updateUserProfile } = authSlice.actions\n\nexport const selectUser = (state: RootState) => state.auth.user\n\nexport default authSlice.reducer","import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport 'firebase/storage'\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_APIKEY,\n  authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n}\n\nexport const firebaseApp = firebase.initializeApp(firebaseConfig)\n\nexport const db = firebaseApp.firestore()\nexport const auth = firebaseApp.auth()\nexport const storage = firebaseApp.storage()\nexport const provider = new firebase.auth.GoogleAuthProvider()\n","import { createBrowserHistory } from 'history'\n\nexport default createBrowserHistory()","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\n\nconst initialState = {\n  categories: [],\n  status: 'idle',\n  error: null\n}\n\nexport const fetchCategoriesData = createAsyncThunk(\n  'category/fetchCategoriesData',\n  async () => {\n    const url = '/api/v1/category'\n    const res = await axios.get(url)\n    return res.data\n  }\n)\n\nexport const categorySlice = createSlice({\n  name: 'category',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchCategoriesData.pending as any]: (state, action) => {\n      state.status = 'loading'\n    },\n    [fetchCategoriesData.fulfilled as any]: (state, action) => {\n      state.status = 'succeeded'\n      state.categories = state.categories.concat(action.payload)\n    },\n    [fetchCategoriesData.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    }\n  }\n})\n\nexport const selectAllCategories = (state: any) => state.categoriesData.categories\n\nexport default categorySlice.reducer","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { Profile } from './userSlice'\n\ninterface PostData {\n  title: string\n  text: string\n  categoryId: string\n  url: string\n  uid: string\n  fav: number\n}\n\nexport interface PostedData {\n  _id: string\n  uid: string\n  title: string\n  text: string\n  categoryId: string\n  url: string\n  fav: number\n  image: string\n}\n\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  error: null\n}\n\nexport const fetchPostData = createAsyncThunk(\n  'posts/fetchPostData',\n  async () => {\n    const url = '/api/v1/post'\n    const res = await axios.get(url)\n    return res.data\n  }\n)\n\nexport const addNewPost = createAsyncThunk(\n  'posts/addNewPost',\n  async (newValues: PostData) => {\n    const url = '/api/v1/post'\n    const res = await axios.post(url, newValues)\n    return res.data\n  }\n)\n\nexport const updatePost = createAsyncThunk(\n  'posts/updatePost',\n  async (newValues: PostedData) => {\n    const url = `/api/v1/post/${newValues._id}`\n    const res = await axios.put(url, newValues)\n    return res.data\n  }\n)\n\nexport const deletePost = createAsyncThunk(\n  'posts/deletePost',\n  async (props: PostedData) => {\n    const url = `/api/v1/post/${props._id}`\n    const res = await axios.delete(url)\n    return res.data\n  }\n)\n\n// 引数がpostのものがあるため、2つ削除関数を追加\nexport const deletePostWithPostArgument = createAsyncThunk(\n  'posts/deletePostWithPostArgument',\n  async (post: PostedData) => {\n    const url = `/api/v1/post/${post._id}`\n    const res = await axios.delete(url)\n    return res.data\n  }\n)\n\nexport const deletePostWithSinglePostArgument = createAsyncThunk(\n  'posts/deletePostWithSinglePostArgument',\n  async (singlePost: PostedData) => {\n    const url = `/api/v1/post/${singlePost._id}`\n    const res = await axios.delete(url)\n    return res.data\n  }\n)\n\nexport const deleteUsersPost = createAsyncThunk(\n  'posts/deleteUsersPost',\n  async (user: Profile) => {\n    const url = `/api/v1/post/user/${user.uid}`\n    const res = await axios.delete(url)\n    return res.data\n  }\n)\n\nexport const postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchPostData.pending as any]: (state, action) => {\n      state.status = 'loading'\n    },\n    [fetchPostData.fulfilled as any]: (state, action) => {\n      state.status = 'succeeded'\n      state.posts = state.posts.concat(action.payload)\n    },\n    [fetchPostData.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    },\n    [addNewPost.fulfilled as any]: (state: any, action) => {\n      state.posts.push(action.payload)\n    },\n    [addNewPost.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    },\n    [updatePost.fulfilled as any]: (state: any, action) => {\n      const postData = state.posts.findIndex(\n        (post: { _id: string }) => post._id === action.payload._id\n      )\n      state.posts.splice(postData, 1, action.payload)\n    },\n    [updatePost.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    },\n    [deletePost.fulfilled as any]: (state: any, action) => {\n      const deletePostData = state.posts.findIndex(\n        (post: { _id: string }) => post._id === action.meta.arg._id\n      )\n      state.posts.splice(deletePostData, 1)\n    },\n    [deletePost.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    },\n    [deletePostWithPostArgument.fulfilled as any]: (state: any, action) => {\n      const deletePostDataWithPostArgument = state.posts.findIndex(\n        (post: { _id: string }) => post._id === action.meta.arg._id\n      )\n      state.posts.splice(deletePostDataWithPostArgument, 1)\n    },\n    [deletePostWithPostArgument.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    },\n    [deletePostWithSinglePostArgument.fulfilled as any]: (state: any, action) => {\n      const deletePostDataWithSinglePostArgument = state.posts.findIndex(\n        (post: { _id: string }) => post._id === action.meta.arg._id\n      )\n      state.posts.splice(deletePostDataWithSinglePostArgument, 1)\n    },\n    [deletePostWithSinglePostArgument.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    },\n    [deleteUsersPost.fulfilled as any]: (state: any, action) => {\n      const deleteUsersPostData = state.posts.findIndex(\n        (post: { _id: string }) => post._id === action.meta.arg._id\n      )\n      state.posts.splice(deleteUsersPostData, 1)\n    },\n    [deleteUsersPost.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    }\n  }\n})\n\nexport const selectAllPosts = (state: any) => state.postData.posts\n\nexport default postsSlice.reducer","import React from 'react'\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Container from \"@material-ui/core/Container\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      \"& > * + *\": {\n        marginLeft: theme.spacing(2),\n      },\n    },\n  })\n);\n\nconst Spinner: React.FC = () => {\n  const classes = useStyles();\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <div className={classes.root}>\n        <CircularProgress />\n      </div>\n    </Container>\n  )\n}\n\nexport default Spinner\n","import React, { useState, useEffect } from 'react'\nimport { auth } from '../firebase'\nimport firebase from 'firebase'\nimport { Redirect, Router } from 'react-router-dom'\nimport Spinner from '../components/Spinner'\nimport Container from '@material-ui/core/Container'\nimport history from '../history'\n\nexport type AuthenticationState =\n  | { isLoading: true }\n  | { isLoading: false; user: firebase.User | null }\n\nconst AuthState: React.FC = ({ children }) => {\n  const [isLogin, setIsLogin] = useState<AuthenticationState>({\n    isLoading: true,\n  })\n\n  useEffect(() => {\n    const unsub = auth.onAuthStateChanged((user) => {\n      setIsLogin({ isLoading: false, user })\n      unsub()\n    })\n  }, [])\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      {isLogin.isLoading ? (\n        <div>\n          <Spinner />\n        </div>\n      ) : (\n        <>\n          {(() => {\n            return !isLogin.user ? (\n              <Router history={history}>\n                <Redirect to={'/'} />\n              </Router>\n            ) : (\n              <>{children}</>\n            )\n          })()}\n        </>\n      )}\n    </Container>\n  )\n}\n\nexport default AuthState\n","import React, { useState, useEffect } from 'react'\nimport {\n  makeStyles,\n  Typography,\n  Button,\n  TextField,\n  MenuItem,\n  Container,\n  Box,\n  IconButton\n} from '@material-ui/core'\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport { Formik, Form } from 'formik'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { selectUser } from '../features/authSlice'\nimport { storage } from '../firebase'\nimport history from '../history'\nimport { fetchCategoriesData, selectAllCategories } from '../features/categorySlice'\nimport { addNewPost } from '../features/postSlice'\nimport { unwrapResult } from '@reduxjs/toolkit'\nimport { Category } from './Sidebar';\nimport AuthState from './AuthState';\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}))\n\nexport interface values {\n  title: string\n  text: string\n  categoryId: string\n  url: string\n  uid: string\n  fav: number\n}\n\nconst initialValues = {\n  title: '',\n  text: '',\n  categoryId: '',\n  url: '',\n  uid: '',\n  fav: 0,\n  _id: '',\n  createdAt: null\n}\n\nconst AddPost: React.FC = () => {\n  const classes = useStyles()\n  const [postImage, setPostImage] = useState<File | null>(null)\n  \n  const user = useSelector(selectUser)\n  const categories = useSelector(selectAllCategories)\n\n  const categoriesStatus = useSelector((state: any) => state.categoriesData.status)\n\n  const dispatch = useDispatch()\n \n  useEffect(() => {\n    if (categoriesStatus === 'idle') {\n      dispatch(fetchCategoriesData())\n    }\n  }, [categoriesStatus, dispatch])\n\n  const onSavePostClicked = async (values: values) => {\n    let imageUrl = ''\n\n    if (postImage) {\n      const str =\n        'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n      const num = 16\n      const randomChar = Array.from(\n        crypto.getRandomValues(new Uint32Array(num))\n      )\n        .map((n) => str[n % str.length])\n        .join('')\n      const fileName = randomChar + '_' + postImage.name\n      await storage.ref(`images/${fileName}`).put(postImage)\n      imageUrl = await storage.ref('images').child(fileName).getDownloadURL()\n\n      try {\n        const newValues = { ...values, uid: user.uid, fav: 0, image: imageUrl }\n        const resultAction = await dispatch(addNewPost(newValues))\n        unwrapResult(resultAction as any)\n        history.push('/feed')\n      } catch (err) {\n        console.error(err)\n      }\n    } else {\n      // 画像がない場合\n      try {\n        const newValues = { ...values, uid: user.uid, fav: 0 }\n        const resultAction = await dispatch(addNewPost(newValues))\n        unwrapResult(resultAction as any)\n        history.push('/feed')\n      } catch (err) {\n        console.error(err)\n      }\n    }\n  }\n\n  const onChangeImageHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files![0]) {\n      setPostImage(e.target.files![0])\n      e.target.value = ''\n    }\n  }\n\n  return (\n    <AuthState>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <Typography component=\"h1\" variant=\"h6\">\n          記事を投稿する\n        </Typography>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={(values: values) => {\n            onSavePostClicked(values)\n          }}\n        >\n          {({ values, handleChange }) => (\n            <Form>\n              <TextField \n                fullWidth \n                variant=\"outlined\"\n                id=\"outlined-basic\"\n                margin=\"normal\"\n                label=\"商品名\"\n                name=\"title\"\n                type=\"text\"\n                value={values.title}\n                onChange={handleChange}\n                required\n              />\n              <TextField \n                fullWidth \n                variant=\"outlined\"\n                id=\"outlined-basic\"\n                margin=\"normal\"\n                label=\"本文\"\n                name=\"text\"\n                type=\"text\"\n                multiline\n                rows={10}\n                value={values.text}\n                onChange={handleChange}\n                required\n              />\n              <TextField \n                fullWidth \n                select\n                variant=\"outlined\"\n                id=\"outlined-basic\"\n                margin=\"normal\"\n                label=\"カテゴリー\"\n                name=\"categoryId\"\n                type=\"text\"\n                value={values.categoryId}\n                onChange={handleChange}\n                required\n              >\n                {categories.map((category: Category) => (\n                  <MenuItem key={category.name} value={category._id}>\n                    {category.name}\n                  </MenuItem>\n                ))}\n              </TextField>\n              <Box>\n                <IconButton\n                  color=\"primary\"\n                  aria-label=\"upload image\"\n                  component=\"span\"\n                >\n                  <label>\n                    <PhotoCamera fontSize=\"large\"/>\n                    <input \n                      type=\"file\"\n                      onChange={onChangeImageHandler}\n                    />\n                  </label>\n                </IconButton>\n              </Box>\n              <TextField \n                fullWidth \n                variant=\"outlined\"\n                id=\"outlined-basic\"\n                margin=\"normal\"\n                label=\"URL\"\n                name=\"url\"\n                type=\"text\"\n                value={values.url}\n                onChange={handleChange}\n                required\n              />\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submit}\n                fullWidth\n              >\n                投稿\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Container>\n    </AuthState>\n  )\n}\n\nexport default AddPost\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\n\nconst initialState = {\n  users: [],\n  status: 'idle',\n  error: null\n}\n\nexport interface Profile {\n  uid: string,\n  username: string,\n  photoUrl: string,\n  company: string,\n  position: string,\n  bio: string,\n  url: string\n}\n\nexport const fetchAvatars = createAsyncThunk(\n  'users/fetchAvatars',\n  async () => {\n    const url = '/api/v1/user'\n    const res = await axios.get(url)\n    return res.data\n  }\n)\n\nexport const updateUserProfile = createAsyncThunk(\n  'users/updateUserProfile',\n  async (newValues: Profile) => {\n    const url = `/api/v1/user/${newValues.uid}`\n    const res = await axios.put(url, newValues)\n    return res.data\n  }\n)\n\nexport const deleteUser = createAsyncThunk(\n  'users/deleteUser',\n  async (user: Profile) => {\n    const url = `/api/v1/user/${user.uid}`\n    const res = await axios.delete(url)\n    return res.data\n  }\n)\n\nexport const usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchAvatars.pending as any]: (state, action) => {\n      state.status = 'loading'\n    },\n    [fetchAvatars.fulfilled as any]: (state, action) => {\n      state.status = 'suceeded'\n      state.users = state.users.concat(action.payload)\n    },\n    [fetchAvatars.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    },\n    [updateUserProfile.fulfilled as any]: (state: any, action) => {\n      const profileData = state.users.findIndex(\n        (user: { uid: string }) => user.uid === action.payload.uid\n      )\n      state.users.splice(profileData, 1, action.payload)\n    },\n    [updateUserProfile.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    },\n    [deleteUser.fulfilled as any]: (state: any, action) => {\n      const deleteUsersData = state.users.findIndex(\n        (user: { _id: string }) => user._id === action.meta.arg._id\n      )\n      state.users.splice(deleteUsersData, 1)\n    },\n    [deleteUser.rejected as any]: (state: any, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    }\n  }\n})\n\nexport const selectAllUsers = (state: any) => state.userData.users\n\nexport default usersSlice.reducer","import React from 'react'\nimport moment from 'moment'\nimport { Avatar } from '@material-ui/core'\nimport { useDispatch ,useSelector } from 'react-redux'\nimport { selectAllCategories } from '../features/categorySlice'\nimport { selectUser } from '../features/authSlice'\nimport { Link } from 'react-router-dom'\nimport { selectAllPosts, deletePost, PostedData } from '../features/postSlice'\nimport { selectAllUsers } from '../features/userSlice'\n\ninterface PostData  {\n  props: PostProps\n}\n\nexport interface PostProps {\n  _id: string\n  uid: string\n  categoryId: string\n  title: string\n  text: string\n  image: string\n  url: string\n  fav: number\n  createdAt: any\n}\n\nexport const initialCategoriesState = [{\n  name: '',\n  _id: ''\n}]\n\nexport const convertPostingDateToJapanTime = (createdAt: any) => {\n  moment.locale('ja')\n  return moment(createdAt).format('YYYY/MM/DD')\n}\n\nconst Post: React.FC<PostData> = ({ props }) => {\n  const authUser = useSelector(selectUser)\n  const categories = useSelector(selectAllCategories)\n  const posts = useSelector(selectAllPosts)\n  const users = useSelector(selectAllUsers)\n\n  const dispatch = useDispatch()\n\n  // categoryIdと名前を一致させる\n  const matchCategoriesIdAndCategoriesName = (categoryId: string) => {\n    return categories.find((category: { _id: string }) => category._id === categoryId)?.name\n  }\n\n  const findOwnPostData = posts.find(\n    (post : { uid: string }) => post.uid === authUser.uid\n  )\n\n  const onDeletePostClicked = (props: PostedData) => {\n    if (window.confirm('記事を削除してもよろしいですか？')) {\n      dispatch(deletePost(props))\n    }\n  }\n\n  const findAuthorName = (uid: string) => {\n    return users.find((user: { uid: string }) => user.uid === uid)?.username\n  }\n\n  return (\n    <div>\n      <p>{convertPostingDateToJapanTime(props.createdAt)}</p>\n      <p>\n        <Link to={`/user/profile/${props.uid}`}>\n          Author: {findAuthorName(props.uid)}\n        </Link>\n      </p>\n      <h1>{props.title}</h1>\n      <p>{props.text}</p>\n      {props.image && (\n        <Avatar src={props.image} />\n      )}\n      <p>カテゴリー: {matchCategoriesIdAndCategoriesName(props.categoryId)}</p>\n      <Link to={`/post/detail/${props._id}`}>続きを読む</Link>\n      {findOwnPostData?.uid === props.uid ? (\n        <>\n          <button>\n            <Link to={`/post/edit/${props._id}`}>編集する</Link>\n          </button>\n          <button onClick={() => onDeletePostClicked(props)}>削除する</button>\n        </>\n      ) : (\n        <></>\n      )}\n    </div>\n  )\n}\n\nexport default Post\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\n\nconst initialState = {\n  comments: [],\n  status: 'idle',\n  error: null\n}\n\nexport interface Value {\n  uid: string;\n  photoUrl: string;\n  text: string;\n  postId: string;\n}\n\nexport const fetchCommentsData = createAsyncThunk(\n  'comments/fetchCommentsData',\n  async () => {\n    const url = '/api/v1/comment'\n    const res = await axios.get(url)\n    return res.data\n  }\n)\n\nexport const addNewComment = createAsyncThunk(\n  'comments/addNewComment',\n  async (newValues: Value) => {\n    const url = '/api/v1/comment'\n    const res = await axios.post(url, newValues)\n    return res.data\n  }\n)\n\nexport const commentSlice = createSlice({\n  name: 'comments',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchCommentsData.pending as any]: (state, action) => {\n      state.status = 'loading'\n    },\n    [fetchCommentsData.fulfilled as any]: (state, action) => {\n      state.status = 'succeeded'\n      state.comments = state.comments.concat(action.payload)\n    },\n    [fetchCommentsData.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    },\n    [addNewComment.fulfilled as any]: (state: any, action) => {\n      state.comments.push(action.payload)\n    },\n    [addNewComment.rejected as any]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    }\n  }\n})\n\nexport const selectAllComments = (state: any) => state.commentData.comments\n\nexport default commentSlice.reducer","import React from 'react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      '& > *': {\n        marginTop: theme.spacing(2),\n      },\n    },\n  })\n)\n\nconst Paginations = ({ postsPerPage, totalPosts, paginate }: any) => {\n  const classes = useStyles()\n  const pageNumbers = []\n\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\n    pageNumbers.push(i)\n  }\n\n  return (\n    <div className={classes.root}>\n      <ul>\n        {pageNumbers.map((number: number) => (\n          <li key={number}>\n            <button onClick={() => paginate(number)}>{number}</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default Paginations\n","import React from 'react'\nimport { Link, Router } from 'react-router-dom'\nimport history from '../history'\nimport { useSelector } from 'react-redux'\nimport { selectAllCategories } from '../features/categorySlice'\n\nexport interface Category {\n  _id: string\n  name: string\n} \n\nconst Sidebar: React.FC = () => {\n  const categories = useSelector(selectAllCategories)\n\n  return (\n    <Router history={history}>\n     {categories.map((category: Category) => (\n       <li key={category._id}>\n         <Link to={`/category/${category._id}`}>{category.name}</Link>\n       </li>\n     ))}\n    </Router>\n  )\n}\n\nexport default Sidebar\n\n","import React, { useEffect, useState } from 'react'\nimport { auth } from '../firebase'\nimport { selectUser } from '../features/authSlice'\nimport { useSelector, useDispatch } from 'react-redux'\nimport axios from 'axios'\nimport Post, { PostProps } from './Post'\nimport { Avatar } from '@material-ui/core'\nimport { fetchPostData, selectAllPosts } from '../features/postSlice'\nimport { fetchAvatars, selectAllUsers } from '../features/userSlice'\nimport { fetchCategoriesData } from '../features/categorySlice'\nimport { fetchCommentsData } from '../features/commentSlice'\nimport Paginations from './Paginations'\nimport AuthState from './AuthState'\nimport Sidebar from './Sidebar'\n\nconst Feed: React.FC = () => {\n  const [currentPage, setCurrentPage] = useState(1)\n  const [postsPerPage] = useState(5)\n\n  const user = useSelector(selectUser)\n  const posts = useSelector(selectAllPosts)\n  const users = useSelector(selectAllUsers)\n  const postStatus = useSelector((state: any) => state.postData.status)\n  const userStatus = useSelector((state: any) => state.userData.status)\n  const categoriesStatus = useSelector((state: any) => state.categoriesData.status)\n  const commentsStatus = useSelector((state: any) => state.commentData.status)\n\n  const dispatch = useDispatch()\n\n  const orderedPosts = posts\n    .slice()\n    .sort((a: { createdAt: string }, b: { createdAt: string }) =>\n      b.createdAt.localeCompare(a.createdAt)\n    )\n\n  const indexOfLastPost = currentPage * postsPerPage\n  const indexOfFirstPost = indexOfLastPost - postsPerPage\n  \n  const currentPosts = orderedPosts.slice(indexOfFirstPost, indexOfLastPost)\n  const paginate = (pageNumber: number) => setCurrentPage(pageNumber)\n  \n  const loginUserState = () => {\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        const addUserInfo = async () => {\n          const url = '/api/v1/user'\n          try {\n            await axios.post(url, {\n              uid: user.uid,\n              username: user.displayName,\n              photoUrl: user.photoURL,\n              role: 'user'\n            })\n          } catch (err) {\n            console.error(err)\n          }\n        }\n        addUserInfo()\n      } else {\n        console.log('未ログイン')\n      }\n    })\n  }\n\n  useEffect(() => {\n    loginUserState()\n    fetchAvatars()\n    if (postStatus === 'idle') {\n      dispatch(fetchPostData())\n    }\n    if (userStatus === 'idle') {\n      dispatch(fetchAvatars())\n    }\n    if (categoriesStatus === 'idle') {\n      dispatch(fetchCategoriesData())\n    }\n    if (commentsStatus === 'idle') {\n      dispatch(fetchCommentsData())\n    }\n  }, [user, postStatus, userStatus, categoriesStatus, commentsStatus, dispatch])\n\n  // 投稿者のuidからphotoUrlを探す\n  const matchUidAndPhotoUrl = (uid: string) => {\n    return users.find((user: { uid: string }) => user.uid === uid)?.photoUrl\n  }\n \n  return (\n    <AuthState>\n      Feed\n      {currentPosts[0]?._id && (\n        <>\n          {currentPosts?.map((post: PostProps) => (\n            <>\n              <Avatar src={matchUidAndPhotoUrl(post.uid)}/>\n              <Post\n                key={post._id}\n                props={post}\n              />\n            </>\n          ))}\n        </>\n      )}\n      <Paginations\n        postsPerPage={postsPerPage}\n        totalPosts={orderedPosts.length}\n        paginate={paginate}\n      />\n      <Sidebar />\n    </AuthState>\n  )\n}\n\nexport default Feed\n","import React, { useState } from 'react'\nimport { auth, provider, storage } from '../firebase'\nimport { updateUserProfile } from '../features/authSlice'\nimport {\n  Avatar,\n  Button,\n  CssBaseline,\n  TextField,\n  Paper,\n  Grid,\n  Typography,\n  makeStyles,\n  Modal,\n  IconButton,\n  Box,\n} from '@material-ui/core'\nimport SendIcon from '@material-ui/icons/Send'\nimport CameraIcon from '@material-ui/icons/Camera'\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle'\nimport { useDispatch } from 'react-redux'\nimport styles from '../modules/Auth.module.css'\nimport history from '../history'\n\nconst getModalStyle = () => {\n  const top = 50\n  const left = 50\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  }\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage:\n      'url(https://images.unsplash.com/photo-1606638436412-23517031f19a?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=668&q=80)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light'\n        ? theme.palette.grey[50]\n        : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  modal: {\n    outline: 'none',\n    position: 'absolute',\n    width: 400,\n    borderRadius: 10,\n    backgroundColor: 'white',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(10),\n  },\n}))\n\nconst Auth: React.FC = () => {\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [username, setUsername] = useState('')\n  const [isLogin, setIsLogin] = useState(true)\n  const [resetEmail, setResetEmail] = useState('')\n  const [openModal, setOpenModal] = useState(false)\n  const [avatarImage, setAvatarImage] = useState<File | null>(null)\n\n  const signUpEmail = async () => {\n    const authUser = await auth.createUserWithEmailAndPassword(email, password)\n    let url = ''\n\n    // file名の前に16桁のランダム値を追加する\n    if (avatarImage) {\n      const str =\n        'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n      const num = 16\n      const randomChar = Array.from(\n        crypto.getRandomValues(new Uint32Array(num))\n      )\n        .map((n) => str[n % str.length])\n        .join('')\n\n      const fileName = randomChar + '_' + avatarImage.name\n      await storage.ref(`avatars/${fileName}`).put(avatarImage)\n      url = await storage.ref('avatars').child(fileName).getDownloadURL()\n    }\n\n    await authUser.user?.updateProfile({\n      displayName: username,\n      photoURL: url,\n    })\n    dispatch(\n      updateUserProfile({\n        displayName: username,\n        photoUrl: url,\n        role: 'user'\n      })\n    )\n    await history.push('/feed')\n  }\n\n  const signInEmail = async () => {\n    await auth.signInWithEmailAndPassword(email, password)\n    if (email === 'admin@example.com') {\n      await history.push('/admin')\n    } else {\n      await history.push('/feed')\n    }\n  }\n\n  const signInGoogle = async () => {\n    await auth.signInWithPopup(provider).catch((err) => {\n      alert(err.message)\n    })\n  }\n\n  const sendResetEmail = async (e: React.MouseEvent<HTMLElement>) => {\n    await auth\n      .sendPasswordResetEmail(resetEmail)\n      .then(() => {\n        setOpenModal(false)\n        setResetEmail('')\n      })\n      .catch((err) => {\n        alert(err.message)\n        setResetEmail('')\n      })\n  }\n\n  const onChangeImageHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files![0]) {\n      setAvatarImage(e.target.files![0])\n      e.target.value = ''\n    }\n  }\n\n  const isLoginDisabled = !email || password.length < 6\n  const isRegisterDisabled =\n    !username || !email || password.length < 6 || !avatarImage\n\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\" data-testid=\"h1\">\n            {isLogin ? 'Login' : 'Register'}\n          </Typography>\n          <form className={classes.form} noValidate>\n            {!isLogin && (\n              <>\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  required\n                  fullWidth\n                  data-testid=\"username\"\n                  id=\"username\"\n                  label=\"Username\"\n                  name=\"username\"\n                  autoComplete=\"username\"\n                  autoFocus\n                  value={username}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setUsername(e.target.value)\n                  }}\n                />\n                <Box textAlign=\"center\">\n                  <IconButton>\n                    <label>\n                      <AccountCircleIcon\n                        fontSize=\"large\"\n                        className={\n                          avatarImage\n                            ? styles.login_addIconLoaded\n                            : styles.login_addIcon\n                        }\n                      />\n                      <input\n                        className={styles.login_hiddenIcon}\n                        type=\"file\"\n                        onChange={onChangeImageHandler}\n                      />\n                    </label>\n                  </IconButton>\n                </Box>\n              </>\n            )}\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              data-testid=\"email\"\n              id=\"email\"\n              aria-label=\"Email Address\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n              value={email}\n              onChange={(\n                e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n              ) => {\n                setEmail(e.target.value)\n              }}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              aria-label=\"Password\"\n              label=\"Password\"\n              type=\"password\"\n              data-testid=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              value={password}\n              onChange={(\n                e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n              ) => {\n                setPassword(e.target.value)\n              }}\n            />\n            <Button\n              disabled={isLogin ? isLoginDisabled : isRegisterDisabled}\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              data-testid=\"authButton\"\n              onClick={\n                isLogin\n                  ? async () => {\n                      try {\n                        await signInEmail()\n                      } catch (err) {\n                        alert(err.message)\n                      }\n                    }\n                  : async () => {\n                      try {\n                        await signUpEmail()\n                      } catch (err) {\n                        alert(err.message)\n                      }\n                    }\n              }\n            >\n              {isLogin ? 'Login' : 'Register'}\n            </Button>\n            <Grid container>\n              <Grid item xs>\n                <span onClick={() => setOpenModal(true)}>Forgot password?</span>\n              </Grid>\n              <Grid item aria-label=\"changeScreen\">\n                <span onClick={() => setIsLogin(!isLogin)}>\n                  {isLogin ? 'Create new account?' : 'Back to login'}\n                </span>\n              </Grid>\n            </Grid>\n            <Button\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              startIcon={<CameraIcon />}\n              onClick={signInGoogle}\n            >\n              Sign In with Google\n            </Button>\n          </form>\n          <Modal open={openModal} onClose={() => setOpenModal(false)}>\n            <div style={getModalStyle()} className={classes.modal}>\n              <div>\n                <TextField\n                  InputLabelProps={{ shrink: true }}\n                  type=\"email\"\n                  name=\"email\"\n                  label=\"Reset Email\"\n                  value={resetEmail}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setResetEmail(e.target.value)\n                  }}\n                />\n                <IconButton onClick={sendResetEmail}>\n                  <SendIcon />\n                </IconButton>\n              </div>\n            </div>\n          </Modal>\n        </div>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default Auth\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { useSelector } from 'react-redux'\nimport { selectAllUsers } from '../features/userSlice'\nimport { selectAllCategories } from '../features/categorySlice'\nimport { PostProps, convertPostingDateToJapanTime } from './Post'\nimport { Avatar } from '@material-ui/core'\n\nconst initialState = [{\n  _id: '',\n  uid: '',\n  categoryId: '',\n  title: '',\n  text: '',\n  image: '',\n  url: '',\n  fav: 0,\n  createdAt: null\n}]\n\nconst SearchResult: React.FC = () => {\n  const [postLists, setPostLists] = useState<PostProps[]>(initialState)\n\n  const q = useSelector((state: any) => state.queryParams).slice(-1)[0].values.q\n  const users = useSelector(selectAllUsers)\n  const categories = useSelector(selectAllCategories)\n\n  useEffect(() => {\n    fetchPostsDataByQueryParams()\n  }, [])\n\n  const orderdPosts = postLists\n    .slice()\n    .sort((a, b) =>\n      convertPostingDateToJapanTime(b.createdAt).localeCompare(\n        convertPostingDateToJapanTime(a.createdAt)\n      )\n    )\n\n  const fetchPostsDataByQueryParams = async () => {\n    const url = `/api/v1/search/posts?q=${q}`\n    try {\n      await axios.get(url).then((res) => {\n        setPostLists(res.data)\n      })\n    } catch (err) {\n      console.error(err)\n    }\n  }\n\n  const matchCategoriesIdAndCategoriesName = (categoryId: string) => {\n    return categories.find((category: { _id: string }) => category._id === categoryId)?.name\n  }\n\n  const matchUidAndPhotoUrl = (uid: string) => {\n    return users.find((user: { uid: string }) => user.uid === uid)?.photoUrl\n  }\n\n  return (\n    <div>\n      <h2>検索結果</h2>\n      {orderdPosts.map((post: PostProps) => (\n        <>\n          <Avatar src={matchUidAndPhotoUrl(post.uid)}/>\n          <p>{convertPostingDateToJapanTime(post.createdAt)}</p>\n          <h1>{post.title}</h1>\n          <p>{post.text}</p>\n          {post.image && (\n            <Avatar src={post.image} />\n          )}\n          <p>カテゴリー: {matchCategoriesIdAndCategoriesName(post.categoryId)}</p>\n        </>\n      ))}\n    </div>\n  )\n}\n\nexport default SearchResult\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { selectAllPosts, PostedData, deletePostWithSinglePostArgument } from '../features/postSlice'\nimport { selectAllCategories, fetchCategoriesData } from '../features/categorySlice'\nimport { selectAllUsers, fetchAvatars } from '../features/userSlice'\nimport { Avatar, TextField, Button } from '@material-ui/core'\nimport MessageIcon from '@material-ui/icons/Message'\nimport SendIcon from '@material-ui/icons/Send'\nimport { selectAllComments, addNewComment } from '../features/commentSlice'\nimport { Formik, Form } from 'formik'\nimport { selectUser } from '../features/authSlice'\nimport { unwrapResult } from '@reduxjs/toolkit'\nimport { Link } from 'react-router-dom'\nimport history from '../history'\nimport Sidebar from './Sidebar'\n\ninterface Comment {\n  _id: string,\n  uid: string,\n  photoUrl: string,\n  text: string,\n  createdAt: any\n}\n\nconst initialValues = {\n  _id: '',\n  uid: '',\n  photoUrl: '',\n  text: '',\n  createdAt: null\n}\n\nconst SinglePostPage: React.FC = ({ match }: any) => {\n  const { id } = match.params\n\n  const [openComments, setOpenComments] = useState(false)\n\n  const posts = useSelector(selectAllPosts)\n  const categories = useSelector(selectAllCategories)\n  const users = useSelector(selectAllUsers)\n  const comments = useSelector(selectAllComments)\n  const authUser = useSelector(selectUser)\n\n  const dispatch = useDispatch()\n\n  const singlePost = posts.find((post : { _id: string }) => post._id === id)\n\n  const userStatus = useSelector((state: any) => state.userData.status)\n  const categoriesStatus = useSelector((state: any) => state.categoriesData.status)\n\n  useEffect(() => {\n    if (categoriesStatus === 'idle') {\n      dispatch(fetchCategoriesData())\n    }\n    if (userStatus === 'idle') {\n      dispatch(fetchAvatars())\n    }\n  }, [categoriesStatus, userStatus, dispatch])\n\n  const matchCategoriesIdAndCategoriesName = (categoryId: string) => {\n    return categories.find((category: { _id: string }) => category._id === categoryId)?.name\n  }\n\n  const fetchAuthorData = users.find((user: { uid: string }) => user.uid === singlePost.uid)\n\n  const commentsOnThisPost = comments.filter((comment: { postId: string }) => comment.postId === singlePost._id)\n\n  // コメントした人のuidから名前を特定する\n  const matchUidAndUsername = (uid: string) => {\n    return users.find((user: { uid: string }) => user.uid === uid)?.username\n  }\n\n  const onSaveCommentClicked = async (values: Comment) => {\n    try {\n      const newValues = { \n        ...values, \n        photoUrl: authUser.photoUrl, \n        uid: authUser.uid, \n        postId: singlePost._id \n      }\n      const resultAction = await dispatch(addNewComment(newValues))\n      unwrapResult(resultAction as any)\n    } catch (err) {\n      console.error(err)\n    }\n  }\n\n  const findOwnPostData = posts.find(\n    (post: { uid: string }) => post.uid === authUser.uid\n  )\n\n  const onDeletePostClicked = async (singlePost: PostedData) => {\n    if (window.confirm('記事を削除してもよろしいですか？')) {\n      dispatch(deletePostWithSinglePostArgument(singlePost))\n      history.push('/feed')\n    }\n  }\n\n  const findAuthorName = (uid: string) => {\n    return users.find((user: { uid: string }) => user.uid === uid)?.username\n  }\n  \n  return (\n    <div>\n      <Avatar src={fetchAuthorData.photoUrl}/>\n      <p>\n        <Link to={`/user/profile/${singlePost.uid}`}>\n          Author: {findAuthorName(singlePost.uid)}\n        </Link>\n      </p>\n      <h1>{singlePost.title}</h1>\n      <p>{singlePost.text}</p>\n      {singlePost.image && (\n        <Avatar src={singlePost.image}/>\n      )}\n      <p>カテゴリー： {matchCategoriesIdAndCategoriesName(singlePost.categoryId)}</p>\n      {findOwnPostData?.uid === singlePost.uid ? (\n        <>\n          <button>\n            <Link to={`/post/edit/${singlePost._id}`}>編集する</Link>\n          </button>\n          <button onClick={() => onDeletePostClicked(singlePost)}>削除する</button>\n        </>\n      ) : (\n        <>\n        </>\n      )}\n      <MessageIcon onClick={() => setOpenComments(!openComments)} />\n      {openComments && (\n        <>\n          {commentsOnThisPost.map((com: Comment) => (\n            <div key={com._id}>\n              <Avatar src={com.photoUrl}/>\n              <span>@{matchUidAndUsername(com.uid)}</span>\n              <span>{com.text}</span>\n            </div>\n          ))}\n          <Formik\n            initialValues={initialValues}\n            onSubmit={(values: Comment) => {\n              onSaveCommentClicked(values)\n            }}\n          >\n            {({ values, handleChange }) => (\n              <>\n                <Form>\n                  <TextField \n                    variant=\"outlined\"\n                    id=\"outlined-basic\"\n                    label=\"コメント\"\n                    name=\"text\"\n                    type=\"text\"\n                    value={values.text}\n                    onChange={handleChange}\n                    required\n                  />\n                </Form>\n                <Button type=\"submit\">\n                  <SendIcon />\n                </Button>\n              </>\n            )}\n          </Formik>\n        </>\n      )}\n      <Sidebar />\n    </div>\n  )\n}\n\nexport default SinglePostPage\n","import React, { useState, useEffect } from 'react'\nimport { \n  Container, \n  Typography, \n  TextField, \n  MenuItem, \n  Box, \n  IconButton, \n  Button,\n  makeStyles\n} from '@material-ui/core'\nimport { Formik, Form } from 'formik'\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectAllCategories, fetchCategoriesData } from '../features/categorySlice';\nimport { Category } from './Sidebar';\nimport { PostedData, updatePost } from '../features/postSlice'\nimport history from '../history'\nimport { unwrapResult } from '@reduxjs/toolkit';\nimport { storage } from '../firebase'\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}))\n\nconst EditPost: React.FC = ({ match }: any) => {\n  const { id } = match.params\n  const singlePost = useSelector((state: any) => \n    state.postData.posts.find((post: { _id: string }) => post._id === id)\n  )\n\n  const initialValues: PostedData = {\n    _id: singlePost._id,\n    uid: singlePost.uid,\n    title: singlePost.title,\n    text: singlePost.text,\n    categoryId: singlePost.categoryId,\n    url: singlePost.url,\n    fav: singlePost.fav,\n    image: singlePost.image\n  }\n\n  const classes = useStyles()\n  const [postImage, setPostImage] = useState<File | null>(null)\n\n  const categories = useSelector(selectAllCategories)\n\n  const categoriesStatus = useSelector((state: any) => state.categoriesData.status)\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    if (categoriesStatus === 'idle') {\n      dispatch(fetchCategoriesData())\n    }\n  }, [categoriesStatus, dispatch])\n\n  const onUpdatePostClicked = async (values: PostedData) => {\n    let imageUrl = ''\n\n    if (postImage) {\n      const str = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n      const num = 16\n      const randomChar = Array.from(crypto.getRandomValues(new Uint32Array(num)))\n       .map((n) => str[n % str.length])\n       .join('')\n      const fileName = randomChar + '_' + postImage.name\n      await storage.ref(`images/${fileName}`).put(postImage)\n      imageUrl = await storage.ref('images').child(fileName).getDownloadURL()\n\n      try {\n        const newValues = { ...values, image: imageUrl }\n        const resultAction = await dispatch(updatePost(newValues))\n        unwrapResult(resultAction as any)\n        history.push('/feed')\n      } catch (err) {\n        console.error(err)\n      }\n    } else {\n      try {\n        const newValues = { ...values, image: '' }\n        const resultAction = await dispatch(updatePost(newValues))\n        unwrapResult(resultAction as any)\n        history.push('/feed')\n      } catch (err) {\n        console.error(err)\n      }\n    }\n\n  }\n\n  const onChangeImageHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files![0]) {\n      setPostImage(e.target.files![0])\n      e.target.value = ''\n    }\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <Typography component=\"h1\" variant=\"h6\">\n        記事を編集する\n      </Typography>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={(values: PostedData) => {\n          onUpdatePostClicked(values)\n        }}\n      >\n        {({ values, handleChange }) => (\n          <Form>\n            <TextField \n              fullWidth \n              variant=\"outlined\"\n              id=\"outlined-basic\"\n              margin=\"normal\"\n              label=\"商品名\"\n              name=\"title\"\n              type=\"text\"\n              value={values.title}\n              onChange={handleChange}\n              required\n            />\n            <TextField \n              fullWidth \n              variant=\"outlined\"\n              id=\"outlined-basic\"\n              margin=\"normal\"\n              label=\"本文\"\n              name=\"text\"\n              type=\"text\"\n              multiline\n              rows={10}\n              value={values.text}\n              onChange={handleChange}\n              required\n            />\n            <TextField \n              fullWidth \n              select\n              variant=\"outlined\"\n              id=\"outlined-basic\"\n              margin=\"normal\"\n              label=\"カテゴリー\"\n              name=\"categoryId\"\n              type=\"text\"\n              value={values.categoryId}\n              onChange={handleChange}\n              required\n            >\n              {categories.map((category: Category) => (\n                <MenuItem key={category.name} value={category._id}>\n                  {category.name}\n                </MenuItem>\n              ))}\n            </TextField>\n            <Box>\n              <IconButton\n                color=\"primary\"\n                aria-label=\"upload image\"\n                component=\"span\"\n              >\n                <label>\n                  <PhotoCamera fontSize=\"large\"/>\n                  <input \n                    type=\"file\"\n                    onChange={onChangeImageHandler}\n                  />\n                </label>\n              </IconButton>\n            </Box>\n            <TextField \n              fullWidth \n              variant=\"outlined\"\n              id=\"outlined-basic\"\n              margin=\"normal\"\n              label=\"URL\"\n              name=\"url\"\n              type=\"text\"\n              value={values.url}\n              onChange={handleChange}\n              required\n            />\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              fullWidth\n            >\n              投稿\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Container>\n  )\n}\n\nexport default EditPost\n","import React, { useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { selectAllUsers, Profile } from '../features/userSlice'\nimport { selectAllPosts, PostedData, deletePostWithPostArgument } from '../features/postSlice'\nimport { selectAllCategories, fetchCategoriesData } from '../features/categorySlice'\nimport { Avatar } from '@material-ui/core'\nimport { PostProps } from './Post'\nimport { Link } from 'react-router-dom'\nimport { selectUser } from '../features/authSlice'\nimport Paginations from './Paginations'\nimport Sidebar from './Sidebar'\n\nconst UserProfile: React.FC = ({ match }: any) => {\n  const { id } = match.params\n\n  const [currentPage, setCurrentPage] = useState(1)\n  const [postsPerPage] = useState(5)\n\n  const users = useSelector(selectAllUsers)\n  const posts = useSelector(selectAllPosts)\n  const categories = useSelector(selectAllCategories)\n  const authUser = useSelector(selectUser)\n\n  const categoriesStatus = useSelector((state: any) => state.categoriesData.status)\n\n  const dispatch = useDispatch()\n\n  const singleUser: Profile = users.find((user: { uid: string }) => user.uid === id)\n  const usersPosts = posts.filter((post: { uid: string }) => post.uid === singleUser.uid)\n\n  const orderedPosts = usersPosts\n    .slice()\n    .sort((a: { createdAt: string }, b: { createdAt: string }) => \n      b.createdAt.localeCompare(a.createdAt)\n    )\n\n  const indexOfLastPost = currentPage * postsPerPage\n  const indexOfFirstPost = indexOfLastPost - postsPerPage\n  \n  const currentPosts = orderedPosts.slice(indexOfFirstPost, indexOfLastPost)\n  const paginate = (pageNumber: number) => setCurrentPage(pageNumber)\n\n  useEffect(() => {\n    if (categoriesStatus === 'idle') {\n      dispatch(fetchCategoriesData())\n    }\n  }, [categoriesStatus, dispatch])\n\n  const matchCategoriesIdAndCategoriesName = (categoryId: string) => {\n    return categories.find((category: { _id: string }) => category._id === categoryId)?.name\n  }\n\n  const findOwnPostData = posts.find((post: { uid: string }) => post.uid === authUser.uid)\n\n  const onDeletePostClicked = async (post: PostedData) => {\n    if (window.confirm('記事を削除してもよろしいですか？')) {\n      dispatch(deletePostWithPostArgument(post))\n    }\n  }\n  return (\n    <div>\n      <Avatar src={singleUser.photoUrl}/>\n      <p>ユーザー名：{singleUser.username}</p>\n      <p>所属： {singleUser.company}</p>\n      <p>役職： {singleUser.position}</p>\n      <p>自己紹介： {singleUser.bio}</p>\n      <p>{singleUser.url}</p>\n      <h1>{singleUser.username}さんの投稿記事</h1>\n      {usersPosts &&\n        currentPosts.map((post: PostProps) => (\n          <>\n            <h1>{post.title}</h1>\n            <p>{post.text}</p>\n            <p>カテゴリー： {matchCategoriesIdAndCategoriesName(post.categoryId)}</p>\n            <Link to={`/post/detail/${post._id}`}>続きを読む</Link>\n            {findOwnPostData?.uid === singleUser.uid ? (\n              <>\n                <button>\n                  <Link to={`/post/edit/${post._id}`}>編集する</Link>\n                </button>\n                <button onClick={() => onDeletePostClicked(post)}>削除する</button>\n              </>\n            ) : (\n              <></>\n            )}\n          </>\n        ))\n      }\n      <Paginations \n        postsPerPage={postsPerPage}\n        totalPosts={orderedPosts.length}\n        paginate={paginate}\n      />\n      <Sidebar />\n    </div>\n  )\n}\n\nexport default UserProfile\n","import React, { useState } from 'react'\nimport { \n  makeStyles, \n  Typography, \n  Button, \n  TextField,\n  Container,\n  Box,\n  IconButton\n} from '@material-ui/core'\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport { Formik, Form } from 'formik'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { unwrapResult } from '@reduxjs/toolkit'\nimport { selectAllUsers, Profile, updateUserProfile } from '../features/userSlice'\nimport { storage } from '../firebase';\nimport history from '../history';\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}))\n\nconst EditProfile: React.FC = ({ match }: any) => {\n  const [postImage, setPostImage] = useState<File | null>(null)\n  const { id } = match.params\n  const classes = useStyles()\n\n  const users = useSelector(selectAllUsers)\n\n  const dispatch = useDispatch()\n\n  const singleUser: Profile = users.find((user: { uid: string }) => user.uid === id)\n\n  const initialValues: Profile = {\n    uid: singleUser.uid,\n    username: singleUser.username,\n    photoUrl: singleUser.photoUrl,\n    company: singleUser.company,\n    position: singleUser.position,\n    bio: singleUser.bio,\n    url: singleUser.url\n  }\n\n  const onUpdateProfileClicked = async (values: Profile) => {\n    let imageUrl = ''\n\n    if (postImage) {\n      const str = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n      const num = 16\n      const randomChar = Array.from(crypto.getRandomValues(new Uint32Array(num)))\n       .map((n) => str[n % str.length])\n       .join('')\n      const fileName = randomChar + '_' + postImage.name\n      await storage.ref(`images/${fileName}`).put(postImage)\n      imageUrl = await storage.ref('images').child(fileName).getDownloadURL()\n\n      try {\n        const newValues = { ...values, image: imageUrl, uid: singleUser.uid }\n        const resultAction = await dispatch(updateUserProfile(newValues))\n        unwrapResult(resultAction as any)\n        history.push('/feed')\n      } catch (err) {\n        console.error(err)\n      }\n    } else {\n      try {\n        const newValues = { ...values, image: singleUser.photoUrl, uid: singleUser.uid }\n        const resultAction = await dispatch(updateUserProfile(newValues))\n        unwrapResult(resultAction as any)\n        history.push('/feed')\n      } catch (err) {\n        console.error(err)\n      }\n    }\n  }\n\n  const onChangeImageHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files![0]) {\n      setPostImage(e.target.files![0])\n      e.target.value = ''\n    }\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <Typography component=\"h1\" variant=\"h6\">\n        プロフィールを編集する\n      </Typography>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={(values: Profile) => {\n          onUpdateProfileClicked(values)\n        }}\n      >\n        {({ values, handleChange }) => (\n          <Form>\n            <TextField \n              fullWidth \n              variant=\"outlined\"\n              id=\"outlined-basic\"\n              margin=\"normal\"\n              label=\"username\"\n              name=\"username\"\n              type=\"text\"\n              value={values.username}\n              onChange={handleChange}\n              required\n            />\n            <Box>\n              <IconButton\n                color=\"primary\"\n                aria-label=\"upload image\"\n                component=\"span\"\n              >\n                <label>\n                  <PhotoCamera fontSize=\"large\"/>\n                  <input \n                    type=\"file\"\n                    onChange={onChangeImageHandler}\n                  />\n                </label>\n              </IconButton>\n            </Box>\n            <TextField \n              fullWidth \n              variant=\"outlined\"\n              id=\"outlined-basic\"\n              margin=\"normal\"\n              label=\"company\"\n              name=\"company\"\n              type=\"text\"\n              value={values.company}\n              onChange={handleChange}\n              required\n            />\n            <TextField \n              fullWidth \n              variant=\"outlined\"\n              id=\"outlined-basic\"\n              margin=\"normal\"\n              label=\"役職\"\n              name=\"position\"\n              type=\"text\"\n              value={values.position}\n              onChange={handleChange}\n              required\n            />\n            <TextField \n              fullWidth \n              variant=\"outlined\"\n              id=\"outlined-basic\"\n              margin=\"normal\"\n              label=\"bio\"\n              name=\"bio\"\n              type=\"text\"\n              multiline\n              rows={10}\n              value={values.bio}\n              onChange={handleChange}\n              required\n            />\n            <TextField \n              fullWidth \n              variant=\"outlined\"\n              id=\"outlined-basic\"\n              margin=\"normal\"\n              label=\"URL\"\n              name=\"url\"\n              type=\"text\"\n              value={values.url}\n              onChange={handleChange}\n              required\n            />\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              fullWidth\n            >\n              投稿\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Container>\n  )\n}\n\nexport default EditProfile\n","import React from 'react'\n\nconst NotFound: React.FC = () => {\n  return (\n    <div>\n      <h1>404 - Not Found!</h1>\n    </div>\n  )\n}\n\nexport default NotFound\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { selectAllPosts, PostedData, deletePostWithPostArgument } from '../features/postSlice'\nimport { selectAllCategories } from '../features/categorySlice'\nimport { selectAllUsers } from '../features/userSlice'\nimport { selectUser } from '../features/authSlice'\nimport { PostProps } from './Post'\nimport { Link } from 'react-router-dom'\nimport { Avatar } from '@material-ui/core'\nimport Sidebar from './Sidebar'\n\nconst CategoryPage: React.FC = ({ match }: any) => {\n  const { id } = match.params\n\n  const posts = useSelector(selectAllPosts)\n  const categories = useSelector(selectAllCategories)\n  const users = useSelector(selectAllUsers)\n  const authUser = useSelector(selectUser)\n\n  const dispatch = useDispatch()\n\n  const categoriesPosts = posts.filter(\n    (categoriesPost: { categoryId: string }) => categoriesPost.categoryId === id\n  )\n\n  const getCategoriesName = categories.find(\n    (category : { _id: string }) => category._id === id\n  ).name\n\n  const orderedPosts = categoriesPosts\n    .slice()\n    .sort((a: { createdAt: string }, b: { createdAt: string }) =>\n      b.createdAt.localeCompare(a.createdAt)\n    )\n  \n  const matchCategoriesIdAndCategoriesName = (categoryId: string) => {\n    return categories.find((category: { _id: string }) => category._id === categoryId)?.name\n  }\n\n  const findAuthorName = (uid: string) => {\n    return users.find((user: { uid: string }) => user.uid === uid)?.username\n  }\n\n  const matchUidAndPhotoUrl = (uid: string) => {\n    return users.find((user: { uid: string }) => user.uid === uid)?.photoUrl\n  }\n\n  const findOwnPostData = posts.find(\n    (post : { uid: string }) => post.uid === authUser.uid\n  )\n\n  const onDeletePostClicked = async (post: PostedData) => {\n    if (window.confirm('記事を削除してもよろしいですか？')) {\n      dispatch(deletePostWithPostArgument(post))\n    }\n  }\n\n  return (\n    <div>\n      <h1>{getCategoriesName}</h1>\n      {orderedPosts[0]?._id && (\n        <>\n          {orderedPosts?.map((post : PostProps) => (\n            <>\n              <Avatar src={matchUidAndPhotoUrl(post.uid)} />\n              <p>\n                <Link to={`/user/profile/${post.uid}`}>\n                  Author: {findAuthorName(post.uid)}\n                </Link>\n              </p>\n              <h1>{post.title}</h1>\n              <p>{post.text}</p>\n              <p>カテゴリー： {matchCategoriesIdAndCategoriesName(post.categoryId)}</p>\n              <Link to={`/post/detail/${post._id}`}>続きを読む</Link>\n              {findOwnPostData?.uid === post.uid ? (\n                <>\n                  <button>\n                    <Link to={`/post/edit/${post._id}`}>編集する</Link>\n                  </button>\n                  <button onClick={() => onDeletePostClicked(post)}>削除する</button>\n                </>\n              ) : (\n                <></>\n              )}\n            </>\n          ))}\n        </>\n      )}\n      <Sidebar />\n    </div>\n  )\n}\n\nexport default CategoryPage\n","import React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { auth } from '../../firebase'\nimport history from '../../history'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { fetchPostData } from '../../features/postSlice'\nimport { fetchAvatars } from '../../features/userSlice'\nimport { fetchCategoriesData } from '../../features/categorySlice'\n\nconst AdminScreen: React.FC = () => {\n  const postStatus = useSelector((state: any) => state.postData.status)\n  const userStatus = useSelector((state: any) => state.userData.status)\n  const categoriesStatus = useSelector((state: any) => state.categoriesData.status)\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    if (postStatus === 'idle') {\n      dispatch(fetchPostData())\n    }\n    if (userStatus === 'idle') {\n      dispatch(fetchAvatars())\n    }\n    if (categoriesStatus === 'idle') {\n      dispatch(fetchCategoriesData())\n    }\n  }, [postStatus, userStatus,categoriesStatus, dispatch])\n  return (\n    <div>\n      <h1>管理画面</h1>\n      <button\n        onClick={async () => {\n          await auth.signOut()\n          await history.push('/login')\n        }}\n      >\n        logout\n      </button>\n      <p>\n        <Link to={'/admin/post'}>投稿記事管理</Link>\n        <Link to={'/admin/user'}>ユーザー管理</Link>\n      </p>\n    </div>\n  )\n}\n\nexport default AdminScreen\n","import React from 'react'\nimport { selectAllUsers, Profile, deleteUser } from '../../features/userSlice'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { deleteUsersPost } from '../../features/postSlice'\n\nconst AdminUsersList: React.FC = () => {\n  const users = useSelector(selectAllUsers)\n  const dispatch = useDispatch()\n\n  const adminUsers = users.filter(\n    (user: { role: string }) => user.role === 'user'\n  )\n\n  console.log(adminUsers)\n\n  const onDeleteUserClicked = async (user: Profile) => {\n    if (window.confirm('ユーザーを削除してもよろしいですか？')) {\n      await dispatch(deleteUser(user))\n      await dispatch(deleteUsersPost(user))\n    }\n  }\n\n  return (\n    <div>\n      <h1>ユーザー管理画面</h1>\n      {adminUsers && (\n        <>\n          {adminUsers.map((user: Profile) => (\n            <li key={user.uid}>\n              <ul>{user.username}</ul>\n              <button onClick={() => onDeleteUserClicked(user)}>削除</button>\n            </li>\n          ))}\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default AdminUsersList\n","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectAllPosts } from '../../features/postSlice'\nimport Paginations from '../Paginations'\nimport { PostProps } from '../Post'\nimport { Link } from 'react-router-dom'\n\nconst AdminPostsList: React.FC = () => {\n  const [currentPage, setCurrentPage] = useState(1)\n  const [postsPerPage] = useState(5)\n\n  const posts = useSelector(selectAllPosts)\n\n  const orderedPosts = posts\n    .slice()\n    .sort((a: { createdAt: string }, b: { createdAt: string }) =>\n      b.createdAt.localeCompare(a.createdAt)\n    )\n\n  const indexOfLastPost = currentPage * postsPerPage\n  const indexOfFirstPost = indexOfLastPost - postsPerPage\n  \n  const currentPosts = orderedPosts.slice(indexOfFirstPost, indexOfLastPost)\n  const paginate = (pageNumber: number) => setCurrentPage(pageNumber)\n\n  return (\n    <div>\n      <h1>投稿記事管理画面</h1>\n      {currentPosts[0]?._id && (\n        <>\n          {currentPosts.map((post: PostProps) => (\n            <>\n              <h3>{post.title}</h3>\n              <Link to={`/admin/post/${post._id}`}>詳細を確認する</Link>\n            </>\n          ))}\n        </>\n      )}\n      <Paginations \n        postsPerPage={postsPerPage}\n        totalPosts={orderedPosts.length}\n        paginate={paginate}\n      />\n    </div>\n  )\n}\n\nexport default AdminPostsList\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { selectAllPosts, PostedData, deletePostWithSinglePostArgument } from '../../features/postSlice'\nimport { selectAllUsers } from '../../features/userSlice'\nimport { selectAllCategories } from '../../features/categorySlice'\nimport { Avatar } from '@material-ui/core'\nimport history from '../../history'\n\nconst AdminPostDetail: React.FC = ({ match }: any) => {\n  const { id } = match.params\n\n  const posts = useSelector(selectAllPosts)\n  const categories = useSelector(selectAllCategories)\n  const users = useSelector(selectAllUsers)\n\n  const dispatch = useDispatch()\n\n  const singlePost: PostedData = posts.find((post : { _id: string }) => post._id === id)\n\n  const matchCategoriesIdAndCategoriesName = (categoryId: string) => {\n    return categories.find((category: { _id: string }) => category._id === categoryId)?.name\n  }\n\n  const findAuthorName = (uid: string) => {\n    return users.find((user: { uid: string }) => user.uid === uid)?.username\n  }\n\n  const onDeletePostClicked = async (singlePost: PostedData) => {\n    if (window.confirm('記事を削除してよろしいですか？')) {\n      dispatch(deletePostWithSinglePostArgument(singlePost))\n      history.push('/admin/post')\n    }\n  }\n \n  return (\n    <div>\n      <h1>記事詳細</h1>\n      <p>Author: {findAuthorName(singlePost.uid)}</p>\n      <h1>{singlePost.title}</h1>\n      <p>{singlePost.text}</p>\n      {singlePost.image && (\n        <Avatar src={singlePost.image}/>\n      )}\n      <p>カテゴリー： {matchCategoriesIdAndCategoriesName(singlePost.categoryId)}</p>\n      <button onClick={() => onDeletePostClicked(singlePost)}>削除</button>\n    </div>\n  )\n}\n\nexport default AdminPostDetail\n","import React from 'react'\nimport { Link, Router } from 'react-router-dom'\nimport history from '../history'\n\nconst Home: React.FC = () => {\n  return (\n    <div>\n      <h1>あなたのビジネスに役立つICT製品がきっと見つかる!</h1>\n      <div>\n        <p>\n          <Router history={history}>\n            <Link to={'/login'}>\n              ログイン・新規登録はこちらから\n            </Link>\n          </Router>\n        </p>\n        <h3>幅広い製品情報を網羅!</h3>\n      </div>\n    </div>\n  )\n}\n\nexport default Home\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\nimport AddPost from './components/AddPost'\nimport Feed from './components/Feed'\nimport Auth from './components/Auth'\nimport SearchResult from './components/SearchResult'\nimport SinglePostPage from './components/SinglePostPage'\nimport EditPost from './components/EditPost'\nimport UserProfile from './components/UserProfile'\nimport EditProfile from './components/EditProfile'\nimport NotFound from './components/NotFound'\nimport CategoryPage from './components/CategoryPage'\nimport AdminScreen from './components/Admin/AdminScreen'\nimport AdminUsersList from './components/Admin/AdminUsersList'\nimport AdminPostsList from './components/Admin/AdminPostsList'\nimport AdminPostDetail from './components/Admin/AdminPostDetail'\nimport Home from './components/Home'\n\nconst Routes: React.FC = () => {\n  const q = useSelector((state: any) => state.queryParams).slice(-1)[0].values.q\n\n  return <div>\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/feed\" component={Feed} />\n      <Route exact path=\"/add\" component={AddPost} />\n      <Route exact path=\"/login\" component={Auth} />\n      <Route exact path={`/search?q=${q}`} component={SearchResult} />\n      <Route exact path={\"/post/detail/:id\"} component={SinglePostPage} />\n      <Route exact path=\"/post/edit/:id\" component={EditPost} />\n      <Route exact path=\"/user/profile/:id\" component={UserProfile} />\n      <Route exact path=\"/user/edit/:id\" component={EditProfile} />\n      <Route exact path=\"/category/:id\" component={CategoryPage} />\n      <Route exact path=\"/admin\" component={AdminScreen} />\n      <Route exact path=\"/admin/user\" component={AdminUsersList} />\n      <Route exact path=\"/admin/post\" component={AdminPostsList} />\n      <Route exact path=\"/admin/post/:id\" component={AdminPostDetail} />\n      <Route component={NotFound} />\n    </Switch>\n  </div>\n}\n\nexport default Routes\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = [{ values: { q: '' } }]\n\nexport const searchSlice = createSlice({\n  name: 'search',\n  initialState,\n  reducers: {\n    searchPosts(state, action)  {\n      state.push(action.payload)\n    }\n  }\n})\n\nexport const { searchPosts } = searchSlice.actions\n\nexport default searchSlice.reducer","import React, { useState } from 'react'\nimport { Formik, Form } from 'formik'\nimport { \n  makeStyles, \n  Theme,\n  createStyles,\n  fade,\n  InputBase,\n} from '@material-ui/core'\nimport SearchIcon from '@material-ui/icons/Search'\nimport { useDispatch } from 'react-redux'\nimport { searchPosts } from '../features/searchSlice'\nimport history from '../history'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    search: {\n      position: 'relative',\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: fade(theme.palette.common.white, 0.15),\n      '&:hover': {\n        backgroundColor: fade(theme.palette.common.white, 0.25),\n      },\n      marginRight: theme.spacing(2),\n      marginLeft: 0,\n      width: '100%',\n      [theme.breakpoints.up('sm')]: {\n        marginLeft: theme.spacing(3),\n        width: 'auto',\n      },\n    },\n    searchIcon: {\n      padding: theme.spacing(0, 2),\n      height: '100%',\n      position: 'absolute',\n      pointerEvents: 'none',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    inputRoot: {\n      color: 'inherit',\n    },\n    inputInput: {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n      transition: theme.transitions.create('width'),\n      width: '100%',\n      [theme.breakpoints.up('md')]: {\n        width: '20ch',\n      },\n    },\n  })\n)\n\ninterface QueryParam {\n  q: string\n}\n\nconst initialValue = {\n  q: '',\n}\n\nconst Search: React.FC = () => {\n  const classes = useStyles()\n  const [queryParam, setQueryParam] = useState<QueryParam>(initialValue)\n\n  const dispatch = useDispatch()\n\n  const searchUsingQueryParam = (values: QueryParam) => {\n    if (values) {\n      dispatch(\n        searchPosts({\n          values,\n        })\n      )\n      setQueryParam(initialValue)\n    }\n  }\n\n  return (\n    <>\n      <div className={classes.search}>\n        <div className={classes.searchIcon}>\n          <SearchIcon />\n        </div>\n        <Formik\n          initialValues={initialValue}\n          onSubmit={(values) => {\n            searchUsingQueryParam(values)\n            history.push({\n              pathname: `/search?q=${values.q}`,\n              state: { values }\n            })\n          }}\n        >\n          {({ values, handleChange }) => (\n            <Form>\n              <InputBase\n                placeholder=\"Search…\"\n                classes={{\n                  root: classes.inputRoot,\n                  input: classes.inputInput,\n                }}\n                inputProps={{ 'aria-label': 'search' }}\n                value={values.q}\n                onChange={handleChange}\n                name=\"q\"\n                type=\"search\"\n              />\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </>\n  )\n}\n\nexport default Search\n","import React from 'react'\nimport { Router, Link } from 'react-router-dom'\nimport { auth } from '../firebase'\nimport history from '../history'\nimport { \n  makeStyles,\n  Theme,\n  createStyles,\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n } from '@material-ui/core'\n import MenuIcon from '@material-ui/icons/Menu'\nimport Routes from '../Routes'\nimport Search from './Search'\nimport { selectUser } from '../features/authSlice'\nimport { useSelector } from 'react-redux'\nimport { selectAllUsers } from '../features/userSlice'\n\n const useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    grow: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      display: 'none',\n      [theme.breakpoints.up('sm')]: {\n        display: 'block',\n      },\n    },\n    sectionDesktop: {\n      display: 'none',\n      [theme.breakpoints.up('md')]: {\n        display: 'flex',\n      },\n    },\n    sectionMobile: {\n      display: 'flex',\n      [theme.breakpoints.up('md')]: {\n        display: 'none',\n      },\n    },\n  })\n)\n\nconst Navbar: React.FC = () => {\n  const classes = useStyles()\n\n  const authUser = useSelector(selectUser)\n  const users = useSelector(selectAllUsers)\n\n  // loginユーザーのroleを特定\n  const findAuthUsersRole = users.find(\n    (user: { uid: string }) => user.uid === authUser.uid\n  )?.role\n\n  const isAuthMenuList = [\n    { key: '1', path: '/feed', name: 'Feed' },\n    { key: '2', path: '/add', name: '投稿' },\n    { key: '3', path: `/user/edit/${authUser.uid}`, name: 'プロフィール変更' },\n  ]\n\n  const isNotAuthMenuList = [\n    { key: '1', path: '/login', name: 'ログイン' }\n  ]\n\n  const adminMenuList = [\n    { key: '1', path: '/admin', name: '管理画面' }\n  ]\n\n  const menuList = () => {\n    if (findAuthUsersRole === 'user') {\n      return (\n        <>\n          {isAuthMenuList.map((menu) => (\n              <Link key={menu.key} to={menu.path}>{menu.name}</Link>\n          ))}\n          <button\n            onClick={async () => {\n              await auth.signOut()\n              await history.push('/login')\n            }}\n          >\n            ログアウト\n          </button>\n        </>\n      )\n    } else if (findAuthUsersRole === 'admin') {\n      return adminMenuList.map((menu) => (\n        <Link key={menu.key} to={menu.path}>{menu.name}</Link>\n      )) \n    }\n    return isNotAuthMenuList.map((menu) => (\n      <Link key={menu.key} to={menu.path}>{menu.name}</Link>\n    ))\n  }\n\n  const isAuthName = authUser ? (\n    <>\n      <p>{authUser.displayName}</p>\n    </>\n  ) : (\n    <></>\n  )\n\n  return (\n    <Router history={history}>\n      <div className={classes.grow}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <IconButton\n              edge=\"start\"\n              className={classes.menuButton}\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography className={classes.title} variant=\"h6\" noWrap>\n              MyApp\n            </Typography>\n            {menuList()}\n            {isAuthName}\n            <Search />\n            <div className={classes.grow} />\n          </Toolbar>\n        </AppBar>\n      </div>\n      <Routes />\n    </Router>\n  )\n}\n\nexport default Navbar\n","import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { login, logout } from './features/authSlice'\nimport { auth } from './firebase'\nimport Navbar from './components/Navbar'\n\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    const unSub = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        dispatch(\n          login({\n            uid: authUser.uid,\n            photoUrl: authUser.photoURL,\n            displayName: authUser.displayName,\n          })\n        )\n      } else {\n        dispatch(logout())\n      }\n    })\n    // cleanup関数\n    return () => {\n      unSub()\n    }\n  }, [dispatch])\n\n  return (\n    <>\n      <Navbar />\n    </>\n  )\n}\n\nexport default App\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport authReducer from '../features/authSlice';\nimport postsReducer from '../features/postSlice'\nimport usersReducer from '../features/userSlice'\nimport categoryReducer from '../features/categorySlice'\nimport searchReducer from '../features/searchSlice'\nimport commentReducer from '../features/commentSlice'\n\nexport const store = configureStore({\n  reducer: {\n    auth: authReducer,\n    postData: postsReducer,\n    userData: usersReducer,\n    categoriesData: categoryReducer,\n    queryParams: searchReducer,\n    commentData: commentReducer\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login_toggleMode\":\"Auth_login_toggleMode__1q3nF\",\"login_modal\":\"Auth_login_modal__2XUe2\",\"login_reset\":\"Auth_login_reset__1CRmT\",\"login_hiddenIcon\":\"Auth_login_hiddenIcon__3EEOO\",\"login_addIcon\":\"Auth_login_addIcon__2hF6-\",\"login_addIconLoaded\":\"Auth_login_addIconLoaded__30_sD\"};"],"sourceRoot":""}